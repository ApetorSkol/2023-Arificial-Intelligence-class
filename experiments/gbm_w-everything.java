/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2023-06-10T15:49:20.444+01:00
  3.40.0.4
  
  Standalone prediction code with sample test data for GBMModel named gbm_1e209b85_646f_4ede_a40e_b3d4e715993e

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.1.11:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.1.11:54321/3/Models.java/gbm-1e209b85-646f-4ede-a40e-b3d4e715993e > gbm_1e209b85_646f_4ede_a40e_b3d4e715993e.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_1e209b85_646f_4ede_a40e_b3d4e715993e.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_1e209b85_646f_4ede_a40e_b3d4e715993e", algorithm="gbm")
public class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 22; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_1e209b85_646f_4ede_a40e_b3d4e715993e.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C2 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_0.VALUES,
    /* C3 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_1.VALUES,
    /* C4 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_2.VALUES,
    /* C5 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_3.VALUES,
    /* C6 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_4.VALUES,
    /* C7 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_5.VALUES,
    /* C8 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_6.VALUES,
    /* C9 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_7.VALUES,
    /* C10 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_8.VALUES,
    /* C11 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_9.VALUES,
    /* C12 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_10.VALUES,
    /* C13 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_11.VALUES,
    /* C14 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_12.VALUES,
    /* C15 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_13.VALUES,
    /* C16 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_14.VALUES,
    /* C17 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_15.VALUES,
    /* C18 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_16.VALUES,
    /* C19 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_17.VALUES,
    /* C20 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_18.VALUES,
    /* C21 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_19.VALUES,
    /* C22 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_20.VALUES,
    /* C23 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_21.VALUES,
    /* C1 */ gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_22.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.6578249336870026E-4,0.5225464190981433,0.47728779840848806};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.6578249336870026E-4,0.5225464190981433,0.47728779840848806};

  public gbm_1e209b85_646f_4ede_a40e_b3d4e715993e() { super(NAMES,DOMAINS,"C1"); }
  public String getUUID() { return Long.toString(-6604621377315654084L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_0.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_1.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_2.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_3.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_4.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_5.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_6.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_7.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_8.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_9.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_10.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_11.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_12.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_13.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_14.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_15.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_16.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_17.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_18.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_19.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_20.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_21.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_22.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_23.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_24.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_25.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_26.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_27.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_28.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_29.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_30.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_31.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_32.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_33.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_34.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_35.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_36.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_37.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_38.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_39.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_40.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_41.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_42.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_43.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_44.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_45.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_46.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_47.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_48.score0(data,preds);
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_49.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_1e209b85_646f_4ede_a40e_b3d4e715993e implements java.io.Serializable {
  public static final String[] VALUES = new String[22];
  static {
    NamesHolder_gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C2";
      sa[1] = "C3";
      sa[2] = "C4";
      sa[3] = "C5";
      sa[4] = "C6";
      sa[5] = "C7";
      sa[6] = "C8";
      sa[7] = "C9";
      sa[8] = "C10";
      sa[9] = "C11";
      sa[10] = "C12";
      sa[11] = "C13";
      sa[12] = "C14";
      sa[13] = "C15";
      sa[14] = "C16";
      sa[15] = "C17";
      sa[16] = "C18";
      sa[17] = "C19";
      sa[18] = "C20";
      sa[19] = "C21";
      sa[20] = "C22";
      sa[21] = "C23";
    }
  }
}
// The class representing column C2
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "cap-shape";
      sa[3] = "f";
      sa[4] = "k";
      sa[5] = "s";
      sa[6] = "x";
    }
  }
}
// The class representing column C3
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "cap-surface";
      sa[1] = "f";
      sa[2] = "g";
      sa[3] = "s";
      sa[4] = "y";
    }
  }
}
// The class representing column C4
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[11];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "cap-color";
      sa[3] = "e";
      sa[4] = "g";
      sa[5] = "n";
      sa[6] = "p";
      sa[7] = "r";
      sa[8] = "u";
      sa[9] = "w";
      sa[10] = "y";
    }
  }
}
// The class representing column C5
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "bruises";
      sa[1] = "f";
      sa[2] = "t";
    }
  }
}
// The class representing column C6
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_4_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "a";
      sa[1] = "c";
      sa[2] = "f";
      sa[3] = "l";
      sa[4] = "m";
      sa[5] = "n";
      sa[6] = "odor";
      sa[7] = "p";
      sa[8] = "s";
      sa[9] = "y";
    }
  }
}
// The class representing column C7
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "a";
      sa[1] = "f";
      sa[2] = "gill-attachment";
    }
  }
}
// The class representing column C8
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "c";
      sa[1] = "gill-spacing";
      sa[2] = "w";
    }
  }
}
// The class representing column C9
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_7_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "gill-size";
      sa[2] = "n";
    }
  }
}
// The class representing column C10
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[13];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_8_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "e";
      sa[2] = "g";
      sa[3] = "gill-color";
      sa[4] = "h";
      sa[5] = "k";
      sa[6] = "n";
      sa[7] = "o";
      sa[8] = "p";
      sa[9] = "r";
      sa[10] = "u";
      sa[11] = "w";
      sa[12] = "y";
    }
  }
}
// The class representing column C11
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_9 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_9_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "e";
      sa[1] = "stalk-shape";
      sa[2] = "t";
    }
  }
}
// The class representing column C12
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_10_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "?";
      sa[1] = "b";
      sa[2] = "c";
      sa[3] = "e";
      sa[4] = "r";
      sa[5] = "stalk-root";
    }
  }
}
// The class representing column C13
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_11_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "f";
      sa[1] = "k";
      sa[2] = "s";
      sa[3] = "stalk-surface-above-ring";
      sa[4] = "y";
    }
  }
}
// The class representing column C14
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_12_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "f";
      sa[1] = "k";
      sa[2] = "s";
      sa[3] = "stalk-surface-below-ring";
      sa[4] = "y";
    }
  }
}
// The class representing column C15
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "e";
      sa[3] = "g";
      sa[4] = "n";
      sa[5] = "o";
      sa[6] = "p";
      sa[7] = "stalk-color-above-ring";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C16
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_14 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_14_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_14_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "e";
      sa[3] = "g";
      sa[4] = "n";
      sa[5] = "o";
      sa[6] = "p";
      sa[7] = "stalk-color-below-ring";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C17
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_15 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_15_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_15_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "p";
      sa[1] = "veil-type";
    }
  }
}
// The class representing column C18
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_16 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_16_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_16_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "n";
      sa[1] = "o";
      sa[2] = "veil-color";
      sa[3] = "w";
      sa[4] = "y";
    }
  }
}
// The class representing column C19
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_17 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_17_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_17_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "n";
      sa[1] = "o";
      sa[2] = "ring-number";
      sa[3] = "t";
    }
  }
}
// The class representing column C20
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_18 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_18_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_18_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "e";
      sa[1] = "f";
      sa[2] = "l";
      sa[3] = "n";
      sa[4] = "p";
      sa[5] = "ring-type";
    }
  }
}
// The class representing column C21
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_19 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_19_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_19_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "h";
      sa[2] = "k";
      sa[3] = "n";
      sa[4] = "o";
      sa[5] = "r";
      sa[6] = "spore-print-color";
      sa[7] = "u";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C22
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_20 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_20_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_20_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "a";
      sa[1] = "c";
      sa[2] = "n";
      sa[3] = "population";
      sa[4] = "s";
      sa[5] = "v";
      sa[6] = "y";
    }
  }
}
// The class representing column C23
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_21 implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_21_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_21_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "d";
      sa[1] = "g";
      sa[2] = "habitat";
      sa[3] = "l";
      sa[4] = "m";
      sa[5] = "p";
      sa[6] = "u";
      sa[7] = "w";
    }
  }
}
// The class representing column C1
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_22 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_22_0.fill(VALUES);
  }
  static final class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_ColInfo_22_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "class";
      sa[1] = "e";
      sa[2] = "p";
    }
  }
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
        -0.1f : 
        -0.08421053f);
    return pred;
  } // constant pool size = 11B, number of visited nodes = 1, static init size = 30B
  // {00000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 2, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
        -0.1f : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
            -0.1f : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                -0.1f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                        -0.1f : 
                        0.19999997f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        0.18831167f : 
                        0.19999997f)))));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, 3, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.1f : 
                        -0.08831169f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.1f : 
                        0.19999997f)) : 
                0.19999997f) : 
            0.19999997f) : 
        0.19999997f);
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
            -0.095488675f : 
            -0.09503839f) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
            -0.09503717f : 
            -0.06399425f));
    return pred;
  } // constant pool size = 29B, number of visited nodes = 3, static init size = 90B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, 1, 0, 0};
  // {11011111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, 30, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[17 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[17])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.09548697f : 
                -0.09503717f) : 
            -0.09503717f) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[19])) ? 
            -0.09503717f : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                -0.094846316f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[10])) ? 
                        -0.09503717f : 
                        0.16544242f) : 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[7])) ? 
                        0.1566533f : 
                        0.1655307f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, 3, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.09506571f : 
                        -0.08489601f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.09503717f : 
                        0.16544242f)) : 
                0.16622844f) : 
            0.16544242f) : 
        0.16544242f);
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[19])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
            -0.09125624f : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.09127176f : 
                    -0.09117297f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                    -0.09097057f : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.090896726f : 
                        -0.09089567f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
            -0.09089574f : 
            -0.07373824f));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {00000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {96, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, 1, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {95, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, 3, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {17, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {12, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                -0.091361225f : 
                -0.09089578f) : 
            -0.090895735f) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[19])) ? 
            -0.09089578f : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                -0.090753034f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[11])) ? 
                        -0.09089578f : 
                        0.14279132f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        0.13372493f : 
                        0.14285308f)))));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11101111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 30, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, 3, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, 3, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {29, 0, 0, 0};
  // {11101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.09091997f : 
                        -0.07821135f) : 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.09089578f : 
                        0.14279132f)) : 
                0.14332666f) : 
            0.14279132f) : 
         (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                0.14278124f : 
                0.14279132f) : 
            0.14279132f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {59, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[17])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[16])) ? 
                -0.08771011f : 
                -0.087550744f) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                    -0.08803282f : 
                    -0.08747012f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                        -0.087777406f : 
                        -0.08744843f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.087420344f : 
                        -0.08741861f)))) : 
         (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
            -0.08742012f : 
            -0.056341194f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {11111011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, 1, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {93, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {95, 3, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, 31, 0, 0};
  // {01101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-10, 3, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {20, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.08855975f : 
                    -0.08741833f) : 
                -0.08741833f) : 
            -0.08741823f) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                -0.08741832f : 
                -0.08730713f) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                -0.08730947f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        -0.087418325f : 
                        0.12692764f) : 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                        0.11934903f : 
                        0.12701969f)))));
    return pred;
  } // constant pool size = 92B, number of visited nodes = 10, static init size = 300B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-6, 7, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 9, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.087462135f : 
                        -0.07612334f) : 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.087418325f : 
                        0.12692764f)) : 
                0.12731224f) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.12692766f : 
                0.12744908f)) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
             (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[5 /* C7 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.12692235f : 
                    0.12692353f) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        0.12692726f : 
                        0.12692763f) : 
                    0.12692764f)) : 
            0.12692763f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {10000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 4, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {27, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                    -0.08504721f : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[19])) ? 
                        -0.084667064f : 
                        -0.08463097f)) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.084723614f : 
                        -0.08463097f) : 
                    -0.08448611f)) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                    -0.08506703f : 
                    -0.08458665f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.0847791f : 
                        -0.08454011f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.084593445f : 
                        -0.0844855f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
            -0.084482f : 
            -0.0651468f));
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {10, 0, 0, 0};
  // {10111011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-35, 1, 0, 0};
  // {10110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {109, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {01111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-2, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {93, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 1, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 3, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, 31, 0, 0};
  // {11111110 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {127, 6, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {12, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.08585174f : 
                    -0.084484756f) : 
                -0.084484756f) : 
             (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[10])) ? 
                -0.08448461f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.08448023f : 
                    -0.08433574f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                -0.08448488f : 
                -0.084399655f) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                -0.08440032f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[10])) ? 
                        -0.08448474f : 
                        0.11530143f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
                        0.10637565f : 
                        0.11537291f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11101011 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-41, 31, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {11101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.08452375f : 
                        -0.069977164f) : 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.08448474f : 
                        0.11530143f)) : 
                0.11558847f) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.115300715f : 
                0.11569052f)) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
            0.115301244f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                0.11529566f : 
                0.11606927f)));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                    -0.08246541f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.08220089f : 
                        -0.08220013f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                        -0.082201034f : 
                        -0.082197666f) : 
                    -0.082001224f)) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                    -0.08252749f : 
                    -0.08210747f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.082243666f : 
                        -0.08207823f) : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.08211385f : 
                        -0.08200146f)))) : 
         (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
            -0.081998825f : 
            -0.043477297f));
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 2, 0, 0};
  // {10111011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-35, 1, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {111, 0, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, 3, 0, 0};
  // {00000000 00011000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 24, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {93, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 1, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 3, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, 31, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {61, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {119, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.08419312f : 
                -0.082000166f) : 
             (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                -0.081999734f : 
                -0.08195981f)) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                -0.08200046f : 
                -0.08193401f) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                -0.0819336f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[11])) ? 
                        -0.08200015f : 
                        0.10649394f) : 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                        0.09865456f : 
                        0.106584206f)))));
    return pred;
  } // constant pool size = 92B, number of visited nodes = 10, static init size = 300B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11101111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 27, 0, 0};
  // {00001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, 3, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {29, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.082053244f : 
                        -0.06886636f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.08200016f : 
                        0.10649394f)) : 
                0.10671482f) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.1064923f : 
                0.10679271f)) : 
         (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
             (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                0.10649368f : 
                0.10673676f) : 
            0.10668838f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                    -0.080280505f : 
                     (Double.isNaN(data[16 /* C18 */]) || !GenModel.bitSetIsInRange(32, 0, data[16]) || (data[16] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[16])) ? 
                        -0.0800876f : 
                        -0.08005308f)) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                        -0.08008767f : 
                        -0.080079585f) : 
                    -0.079886846f)) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                    -0.08040549f : 
                    -0.08004249f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.0801546f : 
                        -0.08000858f) : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.08004792f : 
                        -0.07989017f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
            -0.0798845f : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                -0.0798845f : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                    -0.0798845f : 
                    -0.038763806f))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {48, 0, 0, 0};
  // {10111011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-35, 1, 0, 0};
  // {01110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {110, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000000 00011000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 24, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {93, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 1, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 3, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {126, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {61, 0, 0, 0};
  // {00010000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 8, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-9, 3, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                -0.08114847f : 
                -0.079888396f) : 
             (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                    -0.07988823f : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.07988321f : 
                        -0.07980081f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                        -0.079888396f : 
                        -0.079885885f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        -0.079888396f : 
                        -0.07988543f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                -0.07988882f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.07988861f : 
                        -0.07983625f) : 
                    -0.07980826f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[14])) ? 
                -0.07983528f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        -0.07988838f : 
                        0.099651806f) : 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[20])) ? 
                        0.09215669f : 
                        0.09977256f)))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11101101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-73, 31, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {65, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-17, 3, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {29, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {125, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07993729f : 
                        -0.062748015f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.07988838f : 
                        0.09965181f)) : 
                0.099825226f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.099649236f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.09965054f : 
                        0.099886365f) : 
                    0.10011844f))) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
            0.09965149f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                0.09964149f : 
                0.1001249f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[18])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.07831407f : 
                        -0.07831405f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                        -0.078241974f : 
                        -0.07824187f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.07841678f : 
                        -0.078197435f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                        -0.078190625f : 
                        -0.078086354f))) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                    -0.07855648f : 
                    -0.07823663f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.07826356f : 
                        -0.07815271f) : 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                        -0.07819767f : 
                        -0.07809009f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
            -0.07808312f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                -0.07808311f : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
                    -0.078083105f : 
                    -0.034073975f))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {12, 0, 0, 0};
  // {10011011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-39, 1, 0, 0};
  // {11110100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {47, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {72, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {93, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 1, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {95, 3, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 8, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {125, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {72, 0, 0, 0};
  // {01111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {126, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-9, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.08104205f : 
                        -0.078087725f) : 
                    -0.078087725f) : 
                -0.078087725f) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                -0.078087345f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.07808333f : 
                    -0.0780184f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                -0.07808841f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.07808813f : 
                        -0.07804594f) : 
                    -0.07802429f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                -0.07804488f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                        -0.0780877f : 
                        0.09423082f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.08377743f : 
                        0.094301865f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {65, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {11101111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07813493f : 
                        -0.05951013f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.0780877f : 
                        0.09423082f)) : 
                0.09436925f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.09422627f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.094228156f : 
                        0.094419375f) : 
                    0.094605155f))) : 
         (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                0.09423044f : 
                0.094382495f) : 
            0.094352946f));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[20])) ? 
                -0.07682184f : 
                -0.07675811f) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                    -0.07695128f : 
                    -0.076686956f) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.076704875f : 
                        -0.07661036f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
                        -0.07667212f : 
                        -0.07655092f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
            -0.076543145f : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                -0.076543145f : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                    -0.076543145f : 
                    -0.041865125f))));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {9, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 17, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {125, 0, 0, 0};
  // {10000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {97, 0, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {95, 3, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {72, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {36, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {119, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.07915293f : 
                        -0.07654786f) : 
                    -0.07654786f) : 
                -0.07654786f) : 
             (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[17])) ? 
                -0.07654742f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.076542914f : 
                    -0.07649436f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                -0.07654849f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.07654842f : 
                        -0.076514155f) : 
                    -0.07649703f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                -0.07651287f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[11])) ? 
                        -0.07654783f : 
                        0.08986769f) : 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[7])) ? 
                        0.08005306f : 
                        0.08996734f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {34, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {65, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 3, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {29, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.07661942f : 
                        -0.059014466f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.07654783f : 
                        0.089867696f)) : 
                0.08998024f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.08986323f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.089863494f : 
                        0.09002044f) : 
                    0.09017269f))) : 
         (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
            0.08986727f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                0.08985775f : 
                0.09017937f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[20])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07548408f : 
                        -0.07548407f) : 
                    -0.07548395f) : 
                -0.07542782f) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                    -0.07563659f : 
                    -0.07540607f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.07541559f : 
                        -0.07532026f) : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
                        -0.075373076f : 
                        -0.07523336f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
            -0.07522261f : 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                -0.07522261f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                    -0.07522261f : 
                    -0.03770174f))));
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {119, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 17, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {95, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {10101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {53, 0, 0, 0};
  // {00010000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 8, 0, 0};
  // {00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 1, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {12, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.07675571f : 
                        -0.07522755f) : 
                    -0.07522755f) : 
                -0.07522755f) : 
             (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[17])) ? 
                -0.07522703f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.07522345f : 
                    -0.0751842f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                -0.075228184f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.07522813f : 
                        -0.075200066f) : 
                    -0.07518641f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                -0.07519871f : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                        -0.07522752f : 
                        0.08631081f) : 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.076964036f : 
                        0.08642318f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {24, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {125, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[20])) ? 
                        -0.075311214f : 
                        -0.05834373f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.07522752f : 
                        0.08631081f)) : 
                0.08640359f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.08630593f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.08630615f : 
                        0.08643625f) : 
                    0.08656231f))) : 
         (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
            0.08631036f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                0.08630151f : 
                0.08656786f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                    -0.074376486f : 
                    -0.074279755f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.07433136f : 
                        -0.07418456f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.07418529f : 
                        -0.07418527f))) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                    -0.07446543f : 
                    -0.074256346f) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.074263036f : 
                        -0.0741828f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                        -0.07421062f : 
                        -0.07409711f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                -0.074168146f : 
                 (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                    -0.074093334f : 
                    -0.0740877f)) : 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[13])) ? 
                -0.0740877f : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                    -0.07408771f : 
                    -0.033463728f))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {00010000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 4, 0, 0};
  // {11011011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-37, 3, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 7, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 17, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, 5, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {95, 3, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {36, 0, 0, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {88, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-64, 0, 0, 0};
  // {00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-128, 1, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[11])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                    -0.07824824f : 
                    -0.07409281f) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.07409281f : 
                        -0.07409052f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.07409281f : 
                        -0.07409103f))) : 
             (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[20])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[20])) ? 
                     (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        -0.07409246f : 
                        -0.0740918f) : 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[7])) ? 
                        -0.074092485f : 
                        -0.07409104f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                    -0.07408941f : 
                    -0.07405743f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.07409339f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.07409335f : 
                        -0.0740702f) : 
                    -0.07405922f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.074068844f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.042658176f : 
                        0.07991762f) : 
                     (Double.isNaN(data[16 /* C18 */]) || !GenModel.bitSetIsInRange(32, 0, data[16]) || (data[16] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[16])) ? 
                        0.08339259f : 
                        0.0849389f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {6, 0, 0, 0};
  // {10000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 2, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 9, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {104, 0, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {23, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.075361274f : 
                        -0.07409652f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06407622f : 
                        0.11005113f)) : 
                0.08345787f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.083375715f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.0833759f : 
                        0.08348463f) : 
                    0.08358988f))) : 
         (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                0.083380036f : 
                0.083463565f) : 
            0.083447084f));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {95, 3, 0, 0};
  // {11001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[16])) ? 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[20])) ? 
                -0.07336697f : 
                -0.07327983f) : 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                 (!Double.isNaN(data[17 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[17])) ? 
                    -0.0736394f : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.0732398f : 
                        -0.07319669f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[20])) ? 
                        -0.07336526f : 
                        -0.07334065f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[19])) ? 
                        -0.07328653f : 
                        -0.07312374f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    -0.07311094f : 
                    -0.07311088f) : 
                -0.07311083f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[14])) ? 
                    -0.07311088f : 
                    -0.073110804f) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                    -0.073110804f : 
                    -0.019044925f))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 0, 0, 0};
  // {10110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {13, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, 7, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {95, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {8, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, 3, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 27, 0, 0};
  // {00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {36, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.076501176f : 
                        -0.07311549f) : 
                    -0.07311549f) : 
                -0.07311548f) : 
             (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.07311549f : 
                        -0.07311492f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.073112145f : 
                        -0.073087186f)) : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                        -0.07311471f : 
                        -0.07311423f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
                        -0.07311426f : 
                        -0.073113956f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.07311603f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.07311599f : 
                        -0.073096775f) : 
                    -0.07308788f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.07309546f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.03694738f : 
                        0.0767763f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[14])) ? 
                        0.08095678f : 
                        0.08224041f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {34, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {104, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {32, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.07427686f : 
                        -0.07311859f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.061715804f : 
                        0.09654002f)) : 
                0.081010066f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.080940425f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.08094058f : 
                        0.08103205f) : 
                    0.081120536f))) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[17])) ? 
            0.08094477f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                0.080935806f : 
                0.08112604f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {95, 3, 0, 0};
  // {11001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.07299526f : 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[16])) ? 
                    -0.07249444f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.07237368f : 
                        -0.07234043f))) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.07293499f : 
                        -0.072518475f) : 
                     (!Double.isNaN(data[5 /* C7 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.07241636f : 
                        -0.072272f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                        -0.07251132f : 
                        -0.07248999f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                        -0.07244307f : 
                        -0.072278045f)))) : 
         (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[20])) ? 
                        -0.07227231f : 
                        -0.072272204f) : 
                    -0.07227195f) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[21])) ? 
                        -0.07227239f : 
                        -0.07227195f) : 
                    -0.07227195f)) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                -0.07227195f : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[21])) ? 
                    -0.07227195f : 
                    -0.009705665f))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-127, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {10111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-3, 31, 0, 0};
  // {11110011 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-49, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {111, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {127, 3, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-127, 0, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0};
  // {11110111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-17, 31, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-2, 0, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 1, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {5, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.075940356f : 
                -0.07227215f) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                 (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[18])) ? 
                    -0.07227201f : 
                    -0.07226046f) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[11])) ? 
                        -0.07227176f : 
                        -0.07226373f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.07226939f : 
                        -0.072264284f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                -0.072272584f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                        -0.072272554f : 
                        -0.072256505f) : 
                    -0.072249256f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                -0.07225539f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.031796794f : 
                        0.07391055f) : 
                     (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                        0.078917466f : 
                        0.07999024f)))));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 16, static init size = 480B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11001111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, 31, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {18, 0, 0, 0};
  // {01111111 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 22, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {104, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[5 /* C7 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.07334704f : 
                        -0.07227476f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.059295572f : 
                        0.08454607f)) : 
                0.07896033f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.07890242f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.07890255f : 
                        0.078979954f) : 
                    0.07905478f))) : 
         (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
            0.07890601f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                0.07889799f : 
                0.07905887f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.07263497f : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -0.072748005f : 
                        -0.07158644f)) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                        -0.071702756f : 
                        -0.07163406f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.07160861f : 
                        -0.07154303f))) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    -0.07211533f : 
                    -0.071704626f) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.07183733f : 
                        -0.07160472f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.071715385f : 
                        -0.07154957f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
            -0.071543075f : 
            -0.020720841f));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {00001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-112, 0, 0, 0};
  // {11010011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-53, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {111, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00101000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {20, 9, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {00001000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 4, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 17, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 5, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {36, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        -0.07427507f : 
                        -0.0715432f) : 
                    -0.0715432f) : 
                -0.0715432f) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                        -0.07154272f : 
                        -0.07153173f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        -0.07154255f : 
                        -0.07154227f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.071543224f : 
                        -0.07154081f) : 
                    -0.0715343f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                -0.07154355f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.07154353f : 
                        -0.07153006f) : 
                    -0.071524106f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                -0.07152921f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[19])) ? 
                        2.0302435E-4f : 
                        0.07818788f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.077198446f : 
                        0.07810113f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 1, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 31, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07254907f : 
                        -0.071545474f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                        -0.072214335f : 
                        0.047936328f)) : 
                0.07723233f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.07718568f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.077185795f : 
                        0.077251606f) : 
                    0.077315174f))) : 
         (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[13])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[11])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        0.0771816f : 
                        0.07718922f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        0.077188626f : 
                        0.07718922f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                        0.07718703f : 
                        0.07718925f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                        0.07718925f : 
                        0.0772807f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                0.07718163f : 
                0.07731822f)));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {30, 0, 0, 0};
  // {11110111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 31, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.07215185f : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -0.07209585f : 
                        -0.071228586f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                        -0.071058996f : 
                        -0.07099157f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                        -0.07097025f : 
                        -0.070912056f))) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    -0.07148971f : 
                    -0.07105385f) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.07122919f : 
                        -0.07096635f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.0710633f : 
                        -0.07091796f)))) : 
         (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
            -0.07091202f : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                -0.07091198f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                    -0.07091198f : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                        -0.07091198f : 
                        6.3284955E-5f)))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
  // {11010011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-53, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {111, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {11101011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-41, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {11011111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 2, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 17, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 5, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {5, 0, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {68, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 7, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 2, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.075712085f : 
                        -0.07091219f) : 
                    -0.07091218f) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                    -0.07091218f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                        -0.07091218f : 
                        -0.07090831f))) : 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                    -0.07091218f : 
                    -0.07089577f) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (Double.isNaN(data[9 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[9])) ? 
                        -0.0709115f : 
                        -0.070911326f) : 
                     (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[9])) ? 
                        -0.07091175f : 
                        -0.070911005f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.07091247f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.07091245f : 
                        -0.07090109f) : 
                    -0.07089617f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.07090031f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[19])) ? 
                        5.548768E-4f : 
                        0.07658187f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[14])) ? 
                        0.07574394f : 
                        0.076506056f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {34, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 1, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {111, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 2, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {32, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.071871065f : 
                        -0.070914105f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                        -0.07149094f : 
                        0.043316923f)) : 
                0.075771555f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.075731955f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.075732045f : 
                        0.07578822f) : 
                    0.07584246f))) : 
         (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        0.075731836f : 
                        0.07573209f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
                        0.07573365f : 
                        0.075734444f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                    0.07573489f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.075734995f : 
                        0.075830355f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                0.07572785f : 
                0.07584443f)));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {95, 3, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, 3, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {01000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07171546f : 
                 (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[11])) ? 
                    -0.071534485f : 
                    -0.07089784f)) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                        -0.07052359f : 
                        -0.070461854f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.0704526f : 
                        -0.07041647f)) : 
                 (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.07041658f : 
                    -0.07036514f))) : 
         (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[13])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    -0.070947215f : 
                    -0.070489444f) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.070702225f : 
                        -0.07041286f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                        -0.070497744f : 
                        -0.07037052f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                -0.070365086f : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                    -0.07036504f : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        -0.07036504f : 
                        -3.9405387E-4f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {11010011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-53, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {111, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {29, 0, 0, 0};
  // {11101011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-41, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-112, 0, 0, 0};
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {93, 0, 0, 0};
  // {00100000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 17, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-9, 5, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 1, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {5, 0, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[11])) ? 
                        -0.073618464f : 
                        -0.07036521f) : 
                    -0.07036521f) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.07036521f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                        -0.07036522f : 
                        -0.07036074f))) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.07036464f : 
                        -0.07036442f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.070364274f : 
                        -0.07035919f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                    -0.070363455f : 
                    -0.07035142f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.07036546f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.07036544f : 
                        -0.07035582f) : 
                    -0.070351735f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.07035511f : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        -0.009249413f : 
                        0.074930154f) : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[11])) ? 
                        0.0577411f : 
                        0.074686535f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 1, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {24, 0, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-128, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-2, 5, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {29, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[5 /* C7 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.07128304f : 
                        -0.070366904f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.05380508f : 
                        0.06481961f)) : 
                0.07452917f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.074495435f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.07449552f : 
                        0.07454363f) : 
                    0.074590065f))) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[17])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[20])) ? 
                        0.07449706f : 
                        0.07449713f) : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[6])) ? 
                        0.07449558f : 
                        0.07449747f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                        0.074497424f : 
                        0.074497946f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                        0.07450382f : 
                        0.074538305f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                0.074491315f : 
                0.074591234f)));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {65, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {23, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.07104012f : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -0.07129782f : 
                        -0.07036158f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.070206076f : 
                        -0.06999392f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06993459f : 
                        -0.069890484f))) : 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[20])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.07104373f : 
                        -0.07027231f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.06995291f : 
                        -0.06992517f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                        -0.07004263f : 
                        -0.07003096f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                        -0.070005246f : 
                        -0.069896355f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
            -0.06989042f : 
             (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[20])) ? 
                -0.069890365f : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.069890365f : 
                    0.0040472588f))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 0, 0, 0};
  // {11010011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-53, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {111, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00001010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {80, 4, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-2, 7, 0, 0};
  // {11111101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-65, 7, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, 5, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {72, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {111, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {95, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 1, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {95, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {119, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.07547128f : 
                    -0.06989056f) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[20])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06989058f : 
                        -0.06988891f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                        -0.06989056f : 
                        -0.06988876f))) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.06988999f : 
                        -0.06988968f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06988974f : 
                        -0.06988533f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                    -0.06988904f : 
                    -0.0698789f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.06989075f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.06989074f : 
                        -0.06988256f) : 
                    -0.069879144f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.06988192f : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        -0.017110104f : 
                        0.073934585f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[21])) ? 
                        0.0726967f : 
                        0.076517925f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-6, 7, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {11111101 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, 5, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07077992f : 
                        -0.06989741f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                        -0.0703881f : 
                        0.04164445f)) : 
                0.07346848f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.07343965f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.07343972f : 
                        0.07348105f) : 
                    0.07352093f))) : 
         (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
             (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[18])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                        0.07344084f : 
                        0.07344105f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        0.073440276f : 
                        0.07344194f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[12])) ? 
                        0.073441155f : 
                        0.07344168f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                        0.07344146f : 
                        0.073457785f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[21])) ? 
                        0.073439986f : 
                        0.07344191f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[21])) ? 
                        0.0734404f : 
                        0.07344191f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[21])) ? 
                    0.0734419f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.07346101f : 
                        0.07367374f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {17, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 0, 0, 0};
  // {11110111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 31, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {11010111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-21, 31, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {64, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-2, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {1, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {17, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
            -0.07067611f : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.06977444f : 
                        -0.069774434f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.069752835f : 
                        -0.0697527f)) : 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[16])) ? 
                    -0.0695964f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                        -0.06954062f : 
                        -0.069509596f)))) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.070155025f : 
                    -0.06980048f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[18])) ? 
                        -0.07036142f : 
                        -0.069496706f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.06961117f : 
                        -0.06948555f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.06952963f : 
                        -0.069477275f) : 
                    -0.069477275f) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                    -0.069477275f : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[11])) ? 
                        -0.069477275f : 
                        -1.4760696E-4f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01111101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-66, 7, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {10111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, 31, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {9, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-49, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {62, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {95, 0, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {40, 0, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-65, 31, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 7, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {20, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {30, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.074517444f : 
                        -0.06947822f) : 
                    -0.069478214f) : 
                 (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06947821f : 
                    -0.069467984f)) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                        -0.069477804f : 
                        -0.069477715f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.06947749f : 
                        -0.06947713f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                    -0.06947682f : 
                    -0.06946848f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                -0.06947838f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06947836f : 
                        -0.06947139f) : 
                    -0.06946853f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                -0.06947081f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.030390464f : 
                        0.06302644f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.0725419f : 
                        0.07298643f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11001111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, 31, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {33, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-128, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {104, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-120, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07003403f : 
                        -0.06947773f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.04880281f : 
                        0.061856903f)) : 
                0.07256003f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.072535224f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.072535284f : 
                        0.072570875f) : 
                    0.0726052f))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[6])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        0.07253187f : 
                        0.07253634f) : 
                     (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                        0.07253563f : 
                        0.07253765f)) : 
                0.072563365f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                 (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[10])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.0725371f : 
                        0.07255474f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                        0.072537184f : 
                        0.072646216f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[13])) ? 
                        0.072537154f : 
                        0.072537184f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[13])) ? 
                        0.0726315f : 
                        0.072747886f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {115, 0, 0, 0};
  // {11001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {19, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 17, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-5, 31, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {42, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[11])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.070244625f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[11])) ? 
                        -0.070585296f : 
                        -0.06948738f)) : 
                -0.06924761f) : 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                    -0.07037419f : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06936867f : 
                        -0.069184534f)) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[19])) ? 
                    -0.06923428f : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
                        -0.06918305f : 
                        -0.06912739f)))) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[10])) ? 
             (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[16])) ? 
                    -0.069234f : 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                        -0.06922341f : 
                        -0.06917955f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[20])) ? 
                        -0.06926243f : 
                        -0.06925348f) : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[18])) ? 
                        -0.06923718f : 
                        -0.06912516f))) : 
             (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[19])) ? 
                -0.06911881f : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                    -0.06911881f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        -0.06911881f : 
                        0.017551256f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10111110 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 5, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-17, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {111, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {29, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {40, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {127, 3, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {24, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {48, 0, 0, 0};
  // {01110110 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {110, 1, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {32, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {95, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {61, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-5, 3, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, 31, 0, 0};
  // {11111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        -0.07280667f : 
                        -0.069119684f) : 
                    -0.069119684f) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.06911964f : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.06911911f : 
                        -0.069117114f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                 (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[11])) ? 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                        -0.06911954f : 
                        -0.06911923f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                        -0.069119096f : 
                        -0.06911819f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                        -0.06911971f : 
                        -0.06911832f) : 
                    -0.0691115f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                -0.06911982f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                        -0.06911981f : 
                        -0.069113836f) : 
                    -0.06911143f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                -0.06911336f : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        -0.0309832f : 
                        0.07221795f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[21])) ? 
                        0.0707583f : 
                        0.075491555f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {24, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00001000 00111000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 28, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-9, 5, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[11])) ? 
                        -0.06940072f : 
                        -0.018251995f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.069394074f : 
                        0.10029507f)) : 
                0.071778655f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.07175826f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.071758315f : 
                        0.07178903f) : 
                    0.07181864f))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        0.07175693f : 
                        0.07175953f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        0.071759224f : 
                        0.071759254f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.071759276f : 
                        0.07175994f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        0.07176285f : 
                        0.071794055f))) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                 (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[10])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        0.07175987f : 
                        0.07177505f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                        0.07175996f : 
                        0.071854025f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[21])) ? 
                    0.07175994f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.07184132f : 
                        0.07194165f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 2, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 17, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 1, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {32, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {42, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
            -0.070094675f : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.0690672f : 
                        -0.069024794f) : 
                    -0.06882098f) : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                    -0.068898596f : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.068845965f : 
                        -0.068826474f)))) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.069463775f : 
                    -0.0691127f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.06978738f : 
                        -0.068820454f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                        -0.06885714f : 
                        -0.06881456f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.068828925f : 
                        -0.06880901f) : 
                    -0.06880901f) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                        -0.06880901f : 
                        -0.068808995f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.068809f : 
                        -0.015896564f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {34, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {111, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {36, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-49, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {62, 0, 0, 0};
  // {01101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-10, 3, 0, 0};
  // {00010000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 8, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-65, 31, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-2, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {23, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.074712545f : 
                        -0.0688077f) : 
                    -0.0688077f) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                    -0.0688077f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                        -0.06880692f : 
                        -0.0688043f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                 (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[17])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[13])) ? 
                        -0.068807214f : 
                        -0.06880706f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.06880654f : 
                        -0.068800814f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.068807416f : 
                        -0.06880621f) : 
                    -0.06880387f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                -0.06880781f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                        -0.0688078f : 
                        -0.06880268f) : 
                    -0.068800636f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                -0.068802275f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[12])) ? 
                        -0.07810197f : 
                        0.05094705f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[21])) ? 
                        0.071104236f : 
                        0.07154885f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {65, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {33, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {15, 0, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-120, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.06940852f : 
                        -0.06881354f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                        -0.069217265f : 
                        0.046332356f)) : 
                0.071105815f) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                0.071089186f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        0.07108923f : 
                        0.07111579f) : 
                    0.071141385f))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
             (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[10])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                        0.071089424f : 
                        0.0710901f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        0.071090326f : 
                        0.0710935f)) : 
                0.07111019f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                 (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[10])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        0.07109059f : 
                        0.0711037f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                        0.07109066f : 
                        0.07117197f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                    0.07109064f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[13])) ? 
                        0.07116099f : 
                        0.071247645f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {115, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 17, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {17, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {01010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {42, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[17])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06970514f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.06876416f : 
                        -0.06872529f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.068615496f : 
                        -0.06855905f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.069148235f : 
                    -0.06882648f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                        -0.06947077f : 
                        -0.06854011f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[19])) ? 
                        -0.06866666f : 
                        -0.06854483f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
            -0.06855506f : 
            0.02028347f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 7, 0, 0};
  // {01000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 8, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {127, 3, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {12, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.073966555f : 
                        -0.06853601f) : 
                    -0.06853598f) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                    -0.06853602f : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                        -0.06853602f : 
                        -0.0685331f))) : 
             (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[10])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.06853601f : 
                        -0.06853508f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.06853583f : 
                        -0.06853524f)) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.068535864f : 
                        -0.06853555f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        -0.068534926f : 
                        -0.0685332f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                -0.06853611f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        -0.0685361f : 
                        -0.0685317f) : 
                    -0.06852996f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[14])) ? 
                -0.06853136f : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[17 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[17])) ? 
                        -0.002074693f : 
                        0.07100904f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[21])) ? 
                        0.06926737f : 
                        0.07403563f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {62, 0, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {3, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {8, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07108895f : 
                        -0.068734035f) : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.068666585f : 
                        -0.068535715f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.07085018f : 
                        0.07813436f) : 
                    0.24443434f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.0705118f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.07051184f : 
                        0.07053484f) : 
                    0.070557006f))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.07051239f : 
                        0.07051258f) : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[6])) ? 
                        0.07051082f : 
                        0.07051323f)) : 
                0.07052997f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[14])) ? 
                        0.070512645f : 
                        0.07052435f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                        0.07051308f : 
                        0.07058348f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[21])) ? 
                    0.07051306f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[13])) ? 
                        0.07057396f : 
                        0.070648946f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {11001110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {115, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000000 10001000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 17, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {29, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-128, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {16, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.06930522f : 
                        -0.068500094f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.06851747f : 
                        -0.06847222f)) : 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                    -0.06849379f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06846418f : 
                        -0.06831782f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.06884949f : 
                    -0.06855984f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.06911312f : 
                        -0.06830295f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06841674f : 
                        -0.068307966f)))) : 
        -2.1306843E-4f);
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 5, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {10111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 31, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {62, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                -0.07369943f : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.06829931f : 
                        -0.06829894f) : 
                    -0.068296365f)) : 
             (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[19])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.06829907f : 
                        -0.068298794f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.06829683f : 
                        -0.06829319f)) : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                        -0.068298616f : 
                        -0.06829808f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                        -0.068298854f : 
                        -0.068297796f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                -0.06829937f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.06829936f : 
                        -0.06829557f) : 
                    -0.06829409f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                -0.06821051f : 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[19])) ? 
                        -0.020335805f : 
                        0.070509665f) : 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                        0.07003405f : 
                        0.07049507f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11011111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-5, 5, 0, 0};
  // {11101111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 27, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 3, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {00100100 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {36, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07080883f : 
                        -0.06853776f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.06838314f : 
                        -0.06830102f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.07034613f : 
                        0.077793315f) : 
                    0.2178496f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.07001264f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.070012674f : 
                        0.07003261f) : 
                    0.07005183f))) : 
         (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[11])) ? 
                        0.07001207f : 
                        0.07001299f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        0.0700136f : 
                        0.0700157f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.070013374f : 
                        0.070040144f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.07001373f : 
                        0.070089996f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.07002837f : 
                0.070178464f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.068990424f : 
                        -0.06826896f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.06828424f : 
                        -0.06824412f)) : 
                 (!Double.isNaN(data[17 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[17])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.0682629f : 
                        -0.06826288f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06823657f : 
                        -0.06810869f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.06875604f : 
                    -0.06843422f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[18])) ? 
                        -0.06891032f : 
                        -0.06809611f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
                        -0.06819569f : 
                        -0.06810049f)))) : 
        0.002673168f);
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {00000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {11101111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 5, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, 31, 0, 0};
  // {10110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {13, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {119, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {62, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.07385578f : 
                        -0.06809291f) : 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.06809283f : 
                        -0.06809279f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.06809291f : 
                        -0.06809291f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                        -0.06809284f : 
                        -0.06809039f))) : 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                    -0.06809291f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                        -0.06809262f : 
                        -0.0680902f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                     (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[18])) ? 
                        -0.06809231f : 
                        -0.0680893f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.06809154f : 
                        -0.06808599f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                -0.06809298f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                        -0.06809297f : 
                        -0.068089694f) : 
                    -0.068088435f)) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[14])) ? 
                -0.06796728f : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        -0.04852482f : 
                        0.07001675f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[21])) ? 
                        0.06809237f : 
                        0.0727893f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-5, 31, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {3, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00000000 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 20, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 0, 0, 0};
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 2, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-2, 5, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {8, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.0706148f : 
                        -0.068300635f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.068166085f : 
                        -0.06809442f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.07017334f : 
                        0.07674011f) : 
                    0.19279796f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.06958041f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06958044f : 
                        0.06959776f) : 
                    0.06961443f))) : 
         (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                        0.06958034f : 
                        0.06958091f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.069580816f : 
                        0.069588125f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.069581054f : 
                        0.06960429f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.06958137f : 
                        0.06964756f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06959406f : 
                0.06972406f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-128, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[11])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06874929f : 
                        -0.06831762f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.068201214f : 
                        -0.06820115f)) : 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
                        -0.068061456f : 
                        -0.06806143f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06805283f : 
                        -0.06792637f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.06850323f : 
                    -0.06821631f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[12])) ? 
                        -0.06850779f : 
                        -0.06791281f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
                        -0.068005346f : 
                        -0.06792045f)))) : 
        0.0045907893f);
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {10000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 2, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.071587816f : 
                        -0.0679129f) : 
                    -0.0679129f) : 
                 (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                        -0.06791276f : 
                        -0.06791261f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.06791253f : 
                        -0.067911156f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                 (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[17])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[18])) ? 
                        -0.06791271f : 
                        -0.06791232f) : 
                    -0.06790983f) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.06791293f : 
                        -0.06791069f) : 
                    -0.0679069f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                -0.06791296f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                        -0.06791295f : 
                        -0.06791012f) : 
                    -0.06790904f)) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                    -0.160938f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[12])) ? 
                        -0.07483154f : 
                        0.07103034f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[10])) ? 
                        0.06921754f : 
                        0.06928818f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.06952019f : 
                        0.06981995f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 1, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {00000000 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 20, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {62, 0, 0, 0};
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 2, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {1, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07044619f : 
                        -0.06813003f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.067976914f : 
                        -0.06791605f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06975074f : 
                        0.07646724f) : 
                    0.17042269f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.06920565f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06920567f : 
                        0.06922072f) : 
                    0.06923521f))) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.06920485f : 
                        0.069206044f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.069206f : 
                        0.06921235f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.06920621f : 
                        0.0692264f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.069206476f : 
                        0.06926399f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.069217496f : 
                0.069330245f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {10111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06859137f : 
                        -0.06817743f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06800757f : 
                        -0.06800721f)) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                    -0.067885734f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06787807f : 
                        -0.0677674f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.068281725f : 
                    -0.06802557f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.06839556f : 
                        -0.06776245f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06783504f : 
                        -0.06776237f)))) : 
        0.008877042f);
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 3, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {62, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.07160504f : 
                        -0.067755826f) : 
                    -0.067755826f) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                    -0.06775581f : 
                    -0.067752086f)) : 
             (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[19])) ? 
                 (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        -0.067755416f : 
                        -0.0677553f) : 
                    -0.067754425f) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                        -0.06775563f : 
                        -0.06775542f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06775469f : 
                        -0.06775209f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                    -0.06775587f : 
                    -0.06775412f) : 
                -0.06775292f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[20])) ? 
                    -0.13861237f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[11])) ? 
                        -0.07379033f : 
                        0.070483945f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[13])) ? 
                        0.06889399f : 
                        0.06900276f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.069153436f : 
                        0.069411814f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {72, 0, 0, 0};
  // {11011101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-69, 3, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {12, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {00100000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 4, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 2, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07029726f : 
                        -0.067945264f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.067811646f : 
                        -0.06775857f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.069380105f : 
                        0.07519527f) : 
                    0.14550279f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.06888031f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.068880334f : 
                        0.068893425f) : 
                    0.068906024f))) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[14])) ? 
                        0.06888046f : 
                        0.068880655f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.068880826f : 
                        0.06888436f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.068880804f : 
                        0.068898365f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.06888103f : 
                        0.06893105f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06889062f : 
                0.068988495f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[11])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06841855f : 
                        -0.0680523f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06783848f : 
                        -0.06783817f)) : 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[16])) ? 
                    -0.067732334f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.067725524f : 
                        -0.067628674f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.068086185f : 
                    -0.06785807f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                        -0.068105206f : 
                        -0.06761863f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06768673f : 
                        -0.06762439f)))) : 
        0.0093264105f);
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 23, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[3])) ? 
             (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07333168f : 
                        -0.06761873f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.067618676f : 
                        -0.0676182f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.067618564f : 
                        -0.06761826f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06761841f : 
                        -0.06761676f))) : 
             (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.06761839f : 
                        -0.06761817f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06761842f : 
                        -0.06761805f)) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                    -0.06761861f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.06761758f : 
                        -0.06761555f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06761875f : 
                    -0.06761725f) : 
                -0.06761619f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.12361267f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[11])) ? 
                        -0.07288458f : 
                        0.07000645f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[14])) ? 
                        0.0686095f : 
                        0.068704106f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06883499f : 
                        0.06905789f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {11101011 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, 31, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {24, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {11111101 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-65, 30, 0, 0};
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 2, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07015734f : 
                        -0.067784056f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.06766744f : 
                        -0.06762111f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06905269f : 
                        0.07406472f) : 
                    0.1287604f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.0685976f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.068597615f : 
                        0.06860901f) : 
                    0.06861998f))) : 
         (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[13])) ? 
                        0.06859769f : 
                        0.06859799f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.06859795f : 
                        0.068601124f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.068598025f : 
                        0.06861331f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.06859822f : 
                        0.06864176f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06860656f : 
                0.068691626f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {11001111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, 7, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.068244554f : 
                    -0.06793831f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                    -0.0676909f : 
                    -0.067690626f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[16])) ? 
                        -0.06759837f : 
                        -0.06759837f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06759233f : 
                        -0.067507364f)) : 
                -0.067411974f)) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                    -0.06791371f : 
                    -0.06771102f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        -0.0678822f : 
                        -0.067498915f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                        -0.0675575f : 
                        -0.06750397f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                    -0.06751115f : 
                    -0.067498885f) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06749888f : 
                    0.022384835f))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 4, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {127, 3, 0, 0};
  // {00010000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 8, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 1, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {63, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.07101226f : 
                        -0.06749894f) : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.06749888f : 
                        -0.06749883f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.06749898f : 
                        -0.06749898f) : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                        -0.067498684f : 
                        -0.06749737f))) : 
             (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[17])) ? 
                 (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                        -0.06749878f : 
                        -0.067498624f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.0674986f : 
                        -0.06749739f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                    -0.067497864f : 
                    -0.06749624f))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        -0.06749902f : 
                        -0.06749902f) : 
                    -0.06749773f) : 
                -0.067496784f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.11289417f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.072094895f : 
                        0.06958905f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.06836206f : 
                        0.06845601f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06855821f : 
                        0.06875065f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {40, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000100 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {32, 4, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07166171f : 
                        -0.067666f) : 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.06754153f : 
                        -0.067501076f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06876371f : 
                        0.073112756f) : 
                    0.11683372f)) : 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                0.0683517f : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06835171f : 
                        0.06836163f) : 
                    0.06837119f))) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06835151f : 
                        0.06835185f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.068351924f : 
                        0.06835613f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[10])) ? 
                        0.068352066f : 
                        0.06836539f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.06835224f : 
                        0.06839016f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.0683595f : 
                0.06843349f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {117, 0, 0, 0};
  // {01011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {122, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {111, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.06807723f : 
                    -0.06783289f) : 
                -0.06756193f) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[16])) ? 
                    -0.06748136f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.06747599f : 
                        -0.06740164f)) : 
                -0.067310266f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.06776173f : 
                    -0.06758197f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.067733586f : 
                        -0.06739435f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06744484f : 
                        -0.0673993f))) : 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[12])) ? 
                        -0.06739432f : 
                        -0.067394316f) : 
                    -0.06739431f) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.067394316f : 
                        -0.06739431f) : 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.06739431f : 
                        0.00744613f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 0, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 4, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00000010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 2, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {5, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {12, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {23, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.0725971f : 
                        -0.06739441f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06739441f : 
                        -0.06739387f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                    -0.067394406f : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.06739442f : 
                        -0.06739277f))) : 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                        -0.06739436f : 
                        -0.067393735f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.0673942f : 
                        -0.067394115f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[14])) ? 
                        -0.06739409f : 
                        -0.067393675f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.067394264f : 
                        -0.06739204f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                        -0.06739444f : 
                        -0.067394145f) : 
                    -0.06739328f) : 
                -0.0673925f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.10487439f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[12])) ? 
                        -0.07140673f : 
                        0.06922404f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[14])) ? 
                        0.068146676f : 
                        0.068228476f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.0683169f : 
                        0.06848484f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {10111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {3, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00000100 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {32, 20, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-65, 2, 0, 0};
  // {10110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-19, 7, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07220702f : 
                        -0.06757746f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06751188f : 
                        -0.06739832f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06850886f : 
                        0.072286315f) : 
                    0.10804513f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06813764f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06814571f : 
                        0.06814927f)) : 
                0.068163484f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                        0.06813731f : 
                        0.06813766f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        0.06813784f : 
                        0.068138905f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.068139344f : 
                        0.06814733f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.06813813f : 
                        0.06816839f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06814447f : 
                0.06820886f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.068005964f : 
                        -0.067677945f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06744954f : 
                        -0.067449324f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                        -0.06737911f : 
                        -0.067352235f) : 
                    -0.06722437f)) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.06762789f : 
                    -0.06746873f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                        -0.06760284f : 
                        -0.067302994f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06734657f : 
                        -0.0673073f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
            -0.06730297f : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                -0.067302965f : 
                0.035804085f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {66, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, 3, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 23, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 1, 0, 0};
  // {00100000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 2, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07169075f : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                    -0.06730306f : 
                    -0.067302264f)) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.06730277f : 
                        -0.06730274f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                        -0.06730293f : 
                        -0.06730202f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        -0.06730285f : 
                        -0.06730224f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06730205f : 
                        -0.06729966f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06730307f : 
                        -0.067302845f) : 
                    -0.06730208f) : 
                -0.06730138f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[20])) ? 
                    -0.09866001f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[11])) ? 
                        -0.0708068f : 
                        0.06890474f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[13])) ? 
                        0.06795906f : 
                        0.06803028f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.06810737f : 
                        0.06825283f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11101101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-73, 31, 0, 0};
  // {11011101 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-69, 7, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {18, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {01010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {10, 2, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {29, 0, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07222938f : 
                        -0.06746073f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06740564f : 
                        -0.06730647f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06828431f : 
                        0.07156812f) : 
                    0.10124356f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.067951195f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06795823f : 
                        0.067961335f)) : 
                0.067973725f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06795134f : 
                        0.06795451f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[4])) ? 
                        0.06795303f : 
                        0.067959726f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.06795126f : 
                        0.06795163f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.06795162f : 
                        0.06800843f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06795717f : 
                0.068013236f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 2, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 8, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067876905f : 
                        -0.067558765f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.06735116f : 
                        -0.06735113f)) : 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                    -0.067289755f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06728557f : 
                        -0.06722878f))) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.06758119f : 
                        -0.06744309f) : 
                    -0.06722317f) : 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[19])) ? 
                    -0.06726083f : 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[18])) ? 
                        -0.067261994f : 
                        -0.0672268f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.067241296f : 
                        -0.06723414f) : 
                    -0.067223154f) : 
                -0.06722315f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                -0.067223154f : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                    -0.06722314f : 
                    0.026692832f))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-127, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {34, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {111, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {127, 3, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {61, 0, 0, 0};
  // {11110111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 30, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-2, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-2, 3, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {11110101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-81, 3, 0, 0};
  // {10111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-35, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[21])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[19])) ? 
                    -0.07268963f : 
                    -0.06722322f) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.06722315f : 
                        -0.06722312f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.067223035f : 
                        -0.06722212f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.067222975f : 
                        -0.067222945f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06722289f : 
                        -0.06722212f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06722323f : 
                        -0.067222536f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.06722229f : 
                        -0.06722093f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        -0.06722322f : 
                        -0.06722306f) : 
                    -0.06722238f) : 
                -0.06722175f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.093716554f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.07028359f : 
                        0.06862539f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.06779556f : 
                        0.06785759f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06792483f : 
                        0.06805094f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-69, 0, 0, 0};
  // {11101101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-73, 31, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01001001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-110, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-5, 3, 0, 0};
  // {11111111 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 22, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.072769776f : 
                        -0.067359686f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.067312844f : 
                        -0.0672262f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06808659f : 
                        0.07094347f) : 
                    0.0958432f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06778869f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06779483f : 
                        0.067797534f)) : 
                0.06780835f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.067788735f : 
                        0.06778967f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[21])) ? 
                        0.067788795f : 
                        0.06779613f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.067788735f : 
                        0.06779397f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06778892f : 
                        0.06784988f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.067793906f : 
                0.06784278f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 1, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.06775651f : 
                    -0.06745209f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                    -0.06726535f : 
                    -0.06726519f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                    -0.06721166f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.067207955f : 
                        -0.0671581f)) : 
                -0.06709637f)) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.067406535f : 
                    -0.067282274f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06738686f : 
                        -0.0671534f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
                        -0.067186f : 
                        -0.06715685f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
                    -0.06715845f : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
                        -0.067153916f : 
                        -0.06715339f)) : 
                0.038421992f)));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {68, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 23, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 1, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.071739405f : 
                        -0.06715345f) : 
                    -0.06715345f) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                        -0.06715345f : 
                        -0.06715345f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                        -0.06715345f : 
                        -0.06715266f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (Double.isNaN(data[9 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[9])) ? 
                        -0.067153245f : 
                        -0.067153156f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06715271f : 
                        -0.0671518f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.067153454f : 
                        -0.06715285f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.067152634f : 
                        -0.06715144f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06715338f : 
                    -0.067152716f) : 
                -0.067152165f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.08970346f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.06982713f : 
                        0.06838093f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.06765298f : 
                        0.067707054f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06776571f : 
                        0.067875214f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {11011111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, 31, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, 3, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {72, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07143486f : 
                        -0.0672725f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06723176f : 
                        -0.06715605f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06791261f : 
                        0.07039981f) : 
                    0.09141223f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06764698f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.067652345f : 
                        0.06765471f)) : 
                0.06766415f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06764708f : 
                        0.067649476f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.067647174f : 
                        0.067665786f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.067648776f : 
                        0.067659944f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        0.06765229f : 
                        0.06767279f))) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                0.06765153f : 
                0.06769416f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.06764518f : 
                    -0.06735715f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                    -0.067190275f : 
                    -0.06719013f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                    -0.06714338f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06714012f : 
                        -0.06709649f)) : 
                -0.067040496f)) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.067315504f : 
                    -0.067205906f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[12])) ? 
                        -0.06729811f : 
                        -0.06709241f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
                        -0.067120664f : 
                        -0.0670955f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                        -0.06710543f : 
                        -0.06709379f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[19])) ? 
                        -0.06709585f : 
                        -0.06709379f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                    -0.06709379f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[21])) ? 
                        -0.06709379f : 
                        0.023183132f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {36, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {127, 3, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {40, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 23, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {11111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 5, 0, 0};
  // {11110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-17, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.07154397f : 
                        -0.06709245f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                        -0.06709245f : 
                        -0.067092285f)) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                    -0.06709244f : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                        -0.06709231f : 
                        -0.0670919f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                 (Double.isNaN(data[9 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (data[9] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[9])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[11])) ? 
                        -0.067092285f : 
                        -0.06709215f) : 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        -0.067092165f : 
                        -0.06709153f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                    -0.067092456f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.06709166f : 
                        -0.06709075f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        -0.06709244f : 
                        -0.067092344f) : 
                    -0.06709182f) : 
                -0.06709133f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.08639481f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.069428764f : 
                        0.06816702f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.06752858f : 
                        0.067575745f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06762695f : 
                        0.067722f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 3, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {96, 20, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.071258694f : 
                        -0.06719523f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06716089f : 
                        -0.06709473f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06775961f : 
                        0.06992627f) : 
                    0.08782584f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06752335f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06752803f : 
                        0.067530096f)) : 
                0.067538336f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06752343f : 
                        0.06752553f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.06752352f : 
                        0.067539774f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.06752406f : 
                        0.06752903f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        0.067527995f : 
                        0.06754588f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[8])) ? 
                        0.067521915f : 
                        0.06752271f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[8])) ? 
                        0.0675233f : 
                        0.06752365f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.06752354f : 
                        0.06752734f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[4])) ? 
                        0.06756451f : 
                        0.06757062f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00000000 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 25, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 27, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 4, 0, 0};
  // {00010010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {72, 2, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-17, 7, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {2, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067542866f : 
                        -0.067273006f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06712466f : 
                        -0.06712453f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[16])) ? 
                        -0.06708368f : 
                        -0.06706783f) : 
                    -0.06699226f)) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.06723554f : 
                    -0.06713897f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        -0.06722018f : 
                        -0.06703909f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.0670636f : 
                        -0.06704192f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[11])) ? 
                        -0.06704848f : 
                        -0.06704227f) : 
                    -0.067040294f) : 
                -0.067040294f) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                -0.067040294f : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[19])) ? 
                    -0.067040294f : 
                    0.045936402f))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {9, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {01000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 4, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {36, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-5, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.07142104f : 
                        -0.067039125f) : 
                    -0.06703912f) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                        -0.06703912f : 
                        -0.067038745f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.067039125f : 
                        -0.06703745f))) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[20])) ? 
                     (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                        -0.067038946f : 
                        -0.06703883f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                        -0.06703898f : 
                        -0.06703877f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.067039125f : 
                        -0.06703882f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.067038454f : 
                        -0.06703764f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                        -0.06703911f : 
                        -0.06703904f) : 
                    -0.06703858f) : 
                -0.06703814f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.083632596f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[11])) ? 
                        -0.069081f : 
                        0.06797982f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[13])) ? 
                        0.06742029f : 
                        0.06746117f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.06750588f : 
                        0.06758846f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {65, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {18, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {95, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 22, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.071683064f : 
                        -0.06712835f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06709895f : 
                        -0.067041114f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.067625135f : 
                        0.069513604f) : 
                    0.08483808f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06741545f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.067419544f : 
                        0.06742134f)) : 
                0.06742854f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.067415506f : 
                        0.06741735f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.0674156f : 
                        0.067429796f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.06741607f : 
                        0.067420416f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        0.06741951f : 
                        0.06743513f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[8])) ? 
                        0.0674142f : 
                        0.067414895f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[1])) ? 
                        0.06741537f : 
                        0.067415714f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[1])) ? 
                        0.06741562f : 
                        0.06741894f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[1])) ? 
                        0.06745138f : 
                        0.06745673f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00000000 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 25, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 27, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00010010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {72, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {16, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {15, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06744935f : 
                        -0.06719865f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.06706724f : 
                        -0.06706723f)) : 
                 (!Double.isNaN(data[16 /* C18 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[16])) ? 
                    -0.06703148f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.067028955f : 
                        -0.06699566f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.067165315f : 
                    -0.067080304f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[7])) ? 
                        -0.067207396f : 
                        -0.06699602f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06701375f : 
                        -0.066995025f)))) : 
        0.02807232f);
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {00000001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[12])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.070742875f : 
                    -0.06699249f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    -0.06699249f : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06699234f : 
                        -0.06699187f))) : 
             (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                 (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06699241f : 
                        -0.06699229f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                        -0.06699237f : 
                        -0.066991955f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.06699248f : 
                        -0.06699225f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06699201f : 
                        -0.066991456f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                    -0.066992454f : 
                    -0.06699202f) : 
                -0.066991635f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                    -0.08130475f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[11])) ? 
                        -0.06877732f : 
                        0.067815974f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[14])) ? 
                        0.06732563f : 
                        0.06736115f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.0674002f : 
                        0.06747205f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {22, 0, 0, 0};
  // {00001000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 8, 0, 0};
  // {10000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 2, 0, 0};
  // {11111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 5, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {18, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, 7, 0, 0};
  // {00000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {00000010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.070529126f : 
                        -0.06707032f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.0670448f : 
                        -0.066994235f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.067507006f : 
                        0.0691538f) : 
                    0.08232534f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06732125f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06732482f : 
                        0.0673264f)) : 
                0.067332685f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.067321286f : 
                        0.06732291f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.067321375f : 
                        0.06733378f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.06732179f : 
                        0.067325585f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        0.06732479f : 
                        0.06733844f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[8])) ? 
                        0.06732015f : 
                        0.06732076f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[1])) ? 
                        0.06732118f : 
                        0.06732148f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.06732139f : 
                        0.067324296f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[1])) ? 
                        0.06735262f : 
                        0.0673573f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00000000 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 25, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 27, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00010010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {72, 2, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-17, 7, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {15, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06739672f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06701708f : 
                        -0.06701583f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                        -0.06698583f : 
                        -0.06697291f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.067103684f : 
                    -0.067028895f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[18])) ? 
                        -0.06711589f : 
                        -0.0669548f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[19])) ? 
                        -0.06697019f : 
                        -0.066954084f)))) : 
         (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.06696144f : 
                        -0.06695165f) : 
                    -0.066951655f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.06695167f : 
                        -0.06695167f) : 
                    -0.06695167f)) : 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[21])) ? 
                -0.06695167f : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[14])) ? 
                    -0.066951655f : 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        -0.06695165f : 
                        0.047040965f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, 3, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, 1, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {127, 3, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {20, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {5, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 2, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {23, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.06973697f : 
                        -0.066951714f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06695171f : 
                        -0.0669517f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.06695171f : 
                        -0.06695146f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.06695156f : 
                        -0.06695121f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[6])) ? 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[21])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        -0.06695157f : 
                        -0.06695118f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                        -0.066951714f : 
                        -0.06695137f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06695172f : 
                        -0.066951364f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.066951215f : 
                        -0.066950545f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.066951685f : 
                    -0.066951305f) : 
                -0.06695097f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.079328574f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[11])) ? 
                        -0.068512164f : 
                        0.06767257f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[14])) ? 
                        0.0672428f : 
                        0.06727383f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.06730794f : 
                        0.06737042f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {72, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 3, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07039929f : 
                        -0.067019045f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06699745f : 
                        -0.06695324f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06740328f : 
                        0.06882923f) : 
                    0.08016818f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06723898f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06724209f : 
                        0.06724347f)) : 
                0.06724897f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06723901f : 
                        0.067240395f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.06723909f : 
                        0.067249924f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[14])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.06723945f : 
                        0.067242764f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        0.06724207f : 
                        0.067254f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[8])) ? 
                        0.06723802f : 
                        0.06723855f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[1])) ? 
                        0.06723892f : 
                        0.06723917f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[1])) ? 
                        0.0672391f : 
                        0.06724164f) : 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[20])) ? 
                        0.067266375f : 
                        0.06727048f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00000000 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 25, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 27, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00010010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {72, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {16, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {125, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067287244f : 
                        -0.0670754f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06697326f : 
                        -0.06697318f)) : 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                    -0.0669459f : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06694446f : 
                        -0.0669184f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.0670496f : 
                    -0.06698385f) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                        -0.067060284f : 
                        -0.06691875f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
                        -0.06693213f : 
                        -0.06691796f)))) : 
         (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                -0.066933796f : 
                 (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                        -0.066921145f : 
                        -0.0669174f) : 
                    -0.06690155f)) : 
            0.04145511f));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {127, 3, 0, 0};
  // {01110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {14, 0, 0, 0};
  // {10101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-11, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 1, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {68, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.07049016f : 
                        -0.066916056f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066916056f : 
                        -0.0669156f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.066916056f : 
                        -0.06691581f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.066916056f : 
                        -0.06691494f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[6])) ? 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                     (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[18])) ? 
                        -0.066915944f : 
                        -0.066915534f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                        -0.066915914f : 
                        -0.06691571f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.066916056f : 
                        -0.06691575f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.066915624f : 
                        -0.06691503f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.066916026f : 
                    -0.0669157f) : 
                -0.0669154f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.077641524f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[11])) ? 
                        -0.06828043f : 
                        0.06754707f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[14])) ? 
                        0.067170456f : 
                        0.067197554f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.067227356f : 
                        0.067281745f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {33, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {01111111 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, 22, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 3, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07056885f : 
                        -0.06697467f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06695605f : 
                        -0.06691739f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.067312226f : 
                        0.06855669f) : 
                    0.07835862f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06716711f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06716984f : 
                        0.06717104f)) : 
                0.067175835f)) : 
         (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[9])) ? 
                        0.06716708f : 
                        0.067167155f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.06716711f : 
                        0.06717163f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.06716713f : 
                        0.067167275f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.06716724f : 
                        0.067189336f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                 (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[13])) ? 
                        0.0671673f : 
                        0.0671711f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[4])) ? 
                        0.06716817f : 
                        0.06717337f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[14])) ? 
                        0.06716766f : 
                        0.06717849f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[8])) ? 
                        0.06719105f : 
                        0.06719464f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 1, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 8, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {00000000 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 25, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-5, 3, 0, 0};
  // {00010010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {72, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 1, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06723972f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06693487f : 
                        -0.066933855f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06691067f : 
                        -0.0669024f))) : 
             (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[12])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                    -0.06703651f : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.06692956f : 
                        -0.06692868f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                        -0.06700216f : 
                        -0.06694439f) : 
                     (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[6])) ? 
                        -0.066891976f : 
                        -0.06688628f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[4])) ? 
                        -0.06689587f : 
                        -0.06689314f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                        -0.06688946f : 
                        -0.06688554f)) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[19])) ? 
                        -0.0668893f : 
                        -0.06688554f) : 
                    -0.06688554f)) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                -0.06688554f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                    -0.06688554f : 
                    0.042837568f))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {48, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {15, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {17, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {72, 0, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {119, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-33, 7, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.069041535f : 
                        -0.06688486f) : 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[12])) ? 
                        -0.06688486f : 
                        -0.0668846f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06688486f : 
                        -0.06688486f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06688478f : 
                        -0.06688459f))) : 
             (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[9])) ? 
                 (Double.isNaN(data[3 /* C5 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06688481f : 
                        -0.06688474f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.06688486f : 
                        -0.06688462f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        -0.06688471f : 
                        -0.06688438f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                        -0.06688487f : 
                        -0.0668844f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.06688484f : 
                    -0.066884555f) : 
                -0.066884294f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.076194525f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[12])) ? 
                        -0.06807794f : 
                        0.06743722f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[14])) ? 
                        0.06710724f : 
                        0.067130916f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.067156956f : 
                        0.06720434f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 1, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {33, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {111, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {32, 0, 0, 0};
  // {11111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 5, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {96, 20, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, 7, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.0697983f : 
                        -0.06693599f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06691984f : 
                        -0.06688603f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06723234f : 
                        0.06831878f) : 
                    0.07679641f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06710431f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.067106694f : 
                        0.067107745f)) : 
                0.06711194f)) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.06710432f : 
                        0.0671054f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.0671044f : 
                        0.06711268f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                        0.06710473f : 
                        0.067107186f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06710713f : 
                        0.067128375f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06711444f : 
                0.0671379f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {00000010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {64, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06717431f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06690132f : 
                        -0.06690043f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06688015f : 
                        -0.066872925f))) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.06699573f : 
                        -0.06694713f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.066900074f : 
                        -0.06685756f)) : 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[9])) ? 
                        -0.06687003f : 
                        -0.06686076f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.0668719f : 
                        -0.06685884f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
             (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[10])) ? 
                -0.06687019f : 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[4])) ? 
                    -0.06685817f : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                        -0.066857554f : 
                        -0.06685755f))) : 
             (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[11])) ? 
                -0.066857554f : 
                0.04778791f)));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {111, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 7, 0, 0};
  // {00101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-12, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {95, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {5, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {62, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {30, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.069101706f : 
                        -0.06685758f) : 
                    -0.06685758f) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.06685757f : 
                        -0.06685702f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06685748f : 
                        -0.06685717f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[19])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06685757f : 
                        -0.066857435f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
                        -0.066857465f : 
                        -0.0668574f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                        -0.066857584f : 
                        -0.06685756f) : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        -0.06685727f : 
                        -0.06685697f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06685756f : 
                    -0.06685731f) : 
                -0.06685708f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.07494909f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.06790097f : 
                        0.06734108f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[14])) ? 
                        0.06705209f : 
                        0.067072675f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06709544f : 
                        0.067136735f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {72, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 3, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {96, 20, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {11011110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {123, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {10110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-19, 7, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {111, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06944898f : 
                        -0.0669019f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066888176f : 
                        -0.0668586f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06716226f : 
                        0.06811102f) : 
                    0.075466305f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06704943f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.067051515f : 
                        0.06705243f)) : 
                0.067056105f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.067049436f : 
                        0.067050375f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        0.0670495f : 
                        0.06705674f)) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                        0.067049794f : 
                        0.06705194f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.067051895f : 
                        0.06707046f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06705829f : 
                0.06707879f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 8, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {16, 0, 0, 0};
  // {00000010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {64, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
            -0.06711574f : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.06687198f : 
                        -0.06687197f) : 
                    -0.0668712f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.066855334f : 
                        -0.06685096f) : 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[19])) ? 
                        -0.06685372f : 
                        -0.06683762f)))) : 
         (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                -0.06691791f : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                        -0.06691542f : 
                        -0.06683782f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                        -0.066846795f : 
                        -0.066835344f))) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[12])) ? 
                     (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
                        -0.0668435f : 
                        -0.06683622f) : 
                     (!Double.isNaN(data[3 /* C5 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[3])) ? 
                        -0.066834114f : 
                        -0.06683369f)) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                        -0.06683368f : 
                        -0.06683368f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                        -0.06683368f : 
                        0.043637387f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {36, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {15, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 3, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 3, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-127, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {15, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 1, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[21])) ? 
                        -0.069311805f : 
                        -0.06683365f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06683371f : 
                        -0.06683347f)) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.06683371f : 
                        -0.06683358f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.06683371f : 
                        -0.06683286f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[6])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06683367f : 
                        -0.06683358f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.066833474f : 
                        -0.06683322f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06683371f : 
                        -0.06683351f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.06683343f : 
                        -0.06683303f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.0668337f : 
                    -0.06683348f) : 
                -0.06683327f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                    -0.07387403f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[11])) ? 
                        -0.067746274f : 
                        0.06725692f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[13])) ? 
                        0.06700379f : 
                        0.06702178f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        0.06704168f : 
                        0.06707767f)))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {33, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, 7, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 1, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.0696184f : 
                        -0.06687238f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066860475f : 
                        -0.066834606f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06710081f : 
                        0.06792956f) : 
                    0.07431949f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06700146f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06700328f : 
                        0.067004085f)) : 
                0.067007296f)) : 
         (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        0.067001455f : 
                        0.06700229f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                        0.06700267f : 
                        0.067005664f)) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        0.06700084f : 
                        0.067001276f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.06700674f : 
                        0.06702009f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.067009196f : 
                0.06702712f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {65, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00001000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 9, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, 31, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[20])) ? 
         (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
            -0.06706343f : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.066846326f : 
                        -0.06684628f) : 
                    -0.06684563f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.06683175f : 
                        -0.06682792f) : 
                     (Double.isNaN(data[16 /* C18 */]) || !GenModel.bitSetIsInRange(32, 0, data[16]) || (data[16] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[16])) ? 
                        -0.06683034f : 
                        -0.06681625f)))) : 
         (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                -0.066886686f : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                        -0.066884466f : 
                        -0.06681643f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                        -0.066824324f : 
                        -0.06681426f))) : 
             (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                        -0.06682167f : 
                        -0.06681469f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.06681281f : 
                        -0.066812806f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                    -0.06681281f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[8])) ? 
                        -0.06681281f : 
                        0.040143933f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {36, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {15, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, 3, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 3, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-127, 0, 0, 0};
  // {10101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {21, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 1, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {40, 0, 0, 0};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-127, 0, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 1, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.06921426f : 
                        -0.066812836f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06681283f : 
                        -0.06681255f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06681281f : 
                        -0.06681281f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                        -0.066812836f : 
                        -0.06681206f))) : 
             (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                 (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[17])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
                        -0.066812746f : 
                        -0.066812634f) : 
                    -0.06681252f) : 
                -0.06681257f)) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                    -0.06681282f : 
                    -0.06681263f) : 
                -0.06681245f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[20])) ? 
                    -0.07294391f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[12])) ? 
                        -0.06761103f : 
                        0.06718327f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[14])) ? 
                        0.06696156f : 
                        0.066977285f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.06699468f : 
                        0.067026086f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 1, 0, 0};
  // {10000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06897306f : 
                        -0.06684654f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066836245f : 
                        -0.06681361f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06704693f : 
                        0.067771025f) : 
                    0.07332835f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06695952f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06696111f : 
                        0.06696182f)) : 
                0.06696462f)) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        0.066959515f : 
                        0.066960596f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                        0.06696058f : 
                        0.0669632f)) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        0.06695898f : 
                        0.06695936f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                        0.066964135f : 
                        0.06697581f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06696629f : 
                0.066981964f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {65, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {00001000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 9, 0, 0};
  // {11111101 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, 31, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.067016825f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06682385f : 
                        -0.06682326f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.066809684f : 
                        -0.06680484f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.0668641f : 
                    -0.06682981f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                        -0.0668526f : 
                        -0.06679742f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06679761f : 
                        -0.066795245f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.06680429f : 
                        -0.066794485f) : 
                    -0.06679453f) : 
                -0.066794544f) : 
             (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
                -0.066794544f : 
                 (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                    -0.066794544f : 
                    0.04844625f))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-64, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {10101010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {85, 4, 0, 0};
  // {00010000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 8, 0, 0};
  // {11111111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 30, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {32, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-9, 3, 0, 0};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {23, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.068407744f : 
                        -0.06679456f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                        -0.06679456f : 
                        -0.06679438f)) : 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06679457f : 
                        -0.0667945f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06679449f : 
                        -0.06679427f))) : 
             (Double.isNaN(data[5 /* C7 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[9])) ? 
                        -0.0667945f : 
                        -0.06679447f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                        -0.06679457f : 
                        -0.06679429f)) : 
                -0.066794336f)) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                    -0.06679455f : 
                    -0.06679439f) : 
                -0.06679423f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                    -0.072137736f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[12])) ? 
                        -0.06749278f : 
                        0.06711881f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[13])) ? 
                        0.06692463f : 
                        0.066938385f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.0669536f : 
                        0.06698099f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 1, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {40, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {96, 20, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06883606f : 
                        -0.066823885f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06681505f : 
                        -0.06679525f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.0669997f : 
                        0.06763249f) : 
                    0.072470084f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06692285f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.066924244f : 
                        0.06692486f)) : 
                0.066927314f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.06692284f : 
                        0.066923715f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06692484f : 
                        0.066932775f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06692318f : 
                        0.06692835f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.0669229f : 
                        0.06693692f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06692877f : 
                0.066942476f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06697539f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06680421f : 
                        -0.06680369f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06679181f : 
                        -0.06678758f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.06683955f : 
                    -0.06680948f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[10])) ? 
                        -0.066829436f : 
                        -0.06678108f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[21])) ? 
                        -0.06678311f : 
                        -0.06677955f)))) : 
         (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.06678726f : 
                        -0.06677856f) : 
                    -0.06677856f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                    -0.06677857f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                        -0.06677857f : 
                        -0.06677856f))) : 
             (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[21])) ? 
                    -0.06677856f : 
                    -0.06677856f) : 
                 (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[12])) ? 
                    -0.06677856f : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[13])) ? 
                        -0.06677856f : 
                        0.05061851f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {00000010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {11101101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-73, 0, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {68, 0, 0, 0};
  // {01111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {5, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {27, 0, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-65, 3, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.06865279f : 
                        -0.066778585f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.066778585f : 
                        -0.06677841f)) : 
                 (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[21])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.066778585f : 
                        -0.0667785f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                        -0.066778585f : 
                        -0.066778086f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[11])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
                        -0.06677856f : 
                        -0.06677852f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.066778526f : 
                        -0.066778466f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                    -0.066778585f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06677838f : 
                        -0.06677814f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06677858f : 
                    -0.06677843f) : 
                -0.066778295f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.07143793f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.06738938f : 
                        0.06706239f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[11])) ? 
                        0.06689229f : 
                        0.06690305f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06691767f : 
                        0.066941574f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11110110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {111, 3, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {17, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {27, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {55, 0, 0, 0};
  // {01111111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 30, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {18, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.068874106f : 
                        -0.06680419f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066796504f : 
                        -0.06677918f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06695832f : 
                        0.0675114f) : 
                    0.07172569f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06689079f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.066892006f : 
                        0.06689254f)) : 
                0.06689469f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.066890776f : 
                        0.066891536f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.0668908f : 
                        0.066904426f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06689158f : 
                        0.0668956f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.066890836f : 
                        0.06690309f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06689596f : 
                0.06690795f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06693862f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06678702f : 
                        -0.066786565f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06677618f : 
                        -0.06677247f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.06681804f : 
                    -0.06679168f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
                        -0.066809155f : 
                        -0.06676679f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[21])) ? 
                        -0.06676858f : 
                        -0.06676547f)))) : 
         (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[21])) ? 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.06676908f : 
                        -0.06676458f) : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[12])) ? 
                        -0.066764586f : 
                        -0.066764586f)) : 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                    -0.066764586f : 
                    -0.06676458f)) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                -0.066764586f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                    -0.066764586f : 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[12])) ? 
                        -0.066764586f : 
                        0.048641615f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 1, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {11101101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-73, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {32, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {68, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, 7, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {27, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        -0.068064384f : 
                        -0.0667646f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.0667646f : 
                        -0.06676444f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.0667646f : 
                        -0.066764556f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.066764556f : 
                        -0.06676445f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                        -0.06676455f : 
                        -0.06676439f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[21])) ? 
                        -0.06676453f : 
                        -0.066764474f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                    -0.0667646f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.06676442f : 
                        -0.06676421f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06676459f : 
                    -0.06676447f) : 
                -0.06676435f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.07082972f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[11])) ? 
                        -0.06729895f : 
                        0.06701301f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[11])) ? 
                        0.06686406f : 
                        0.06687347f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06688626f : 
                        0.06690713f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {63, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {20, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {18, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06838653f : 
                        -0.06678693f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06678028f : 
                        -0.06676512f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06692205f : 
                        0.06740556f) : 
                    0.0710792f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06686275f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06686381f : 
                        0.06686428f)) : 
                0.06686616f)) : 
         (Double.isNaN(data[17 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[17]) || (data[17] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[17]) && (data[17] < 4) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[17])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.06686273f : 
                        0.06686356f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.066862755f : 
                        0.066874675f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06686344f : 
                        0.06686696f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.066862784f : 
                        0.066873506f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06686727f : 
                0.06687775f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06689779f : 
                        -0.066807725f) : 
                    -0.066771984f) : 
                 (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                        -0.06676263f : 
                        -0.06676263f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06676212f : 
                        -0.06675315f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                    -0.06679921f : 
                    -0.0667761f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                        -0.0667914f : 
                        -0.06675428f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06675594f : 
                        -0.066753104f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                -0.066765144f : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[20])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[21])) ? 
                        -0.06675448f : 
                        -0.06675308f) : 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.0667565f : 
                        -0.066745184f))) : 
             (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[19])) ? 
                -0.066752635f : 
                 (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                    -0.066752635f : 
                    0.03519502f))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, 3, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {15, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 23, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {12, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, 7, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {55, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-9, 3, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {15, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[21])) ? 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        -0.06795632f : 
                        -0.06675237f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06675237f : 
                        -0.066752285f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.066752344f : 
                        -0.066752255f) : 
                    -0.06675212f)) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06675237f : 
                        -0.0667523f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06675237f : 
                        -0.06675229f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[20])) ? 
                        -0.06675237f : 
                        -0.06675237f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        -0.06675227f : 
                        -0.06675213f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06675236f : 
                    -0.06675225f) : 
                -0.06675214f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.070300564f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[11])) ? 
                        -0.06721985f : 
                        0.06696979f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[11])) ? 
                        0.06683937f : 
                        0.06684759f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06685878f : 
                        0.06687701f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {72, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00000110 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {96, 4, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {11011110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {123, 3, 0, 0};
  // {11111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 5, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {32, 0, 0, 0};
  // {11111101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-65, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {18, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06826016f : 
                        -0.06677182f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06676608f : 
                        -0.06675283f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.066890284f : 
                        0.067313015f) : 
                    0.070517115f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06683822f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06683915f : 
                        0.06683956f)) : 
                0.0668412f)) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.06683829f : 
                        0.06683893f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06683823f : 
                        0.06684865f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06683882f : 
                        0.0668419f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06683825f : 
                        0.06684763f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.066842176f : 
                0.06685135f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06687722f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06675883f : 
                        -0.06675847f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06675053f : 
                        -0.06674769f))) : 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[18 /* C20 */]) && (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[18])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.06679685f : 
                        -0.06677722f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.06675832f : 
                        -0.06674165f)) : 
                 (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[9])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                        -0.06674328f : 
                        -0.06674165f) : 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                        -0.066746466f : 
                        -0.06674207f)))) : 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                 (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                    -0.066749215f : 
                    -0.06674165f) : 
                 (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[10])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.06674274f : 
                        -0.0667419f) : 
                    -0.06674165f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                -0.0667419f : 
                 (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[12])) ? 
                    -0.0667419f : 
                    0.047301315f))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {11110111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, 1, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {62, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {111, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0};
  // {01101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-10, 3, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {68, 0, 0, 0};
  // {01111110 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {126, 6, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {11111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 5, 0, 0};
  // {00100000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {27, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.068218715f : 
                        -0.06674166f) : 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.06674166f : 
                        -0.066741444f)) : 
                 (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.06674165f : 
                        -0.06674165f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.06674166f : 
                        -0.066741265f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                        -0.066741616f : 
                        -0.06674161f) : 
                    -0.066741504f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                    -0.06674167f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.066741526f : 
                        -0.06674136f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                    -0.06674166f : 
                    -0.06674156f) : 
                -0.06674147f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[20])) ? 
                    -0.069839805f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[11])) ? 
                        -0.067150675f : 
                        0.06693196f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[14])) ? 
                        0.066817865f : 
                        0.06682585f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.066834755f : 
                        0.06685067f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00100000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 1, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06829979f : 
                        -0.06675867f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06675366f : 
                        -0.06674206f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06686246f : 
                        0.0672321f) : 
                    0.07002796f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06681677f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06681758f : 
                        0.06681794f)) : 
                0.06681938f)) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.06681682f : 
                        0.06681739f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06681677f : 
                        0.06682589f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.0668173f : 
                        0.06681999f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.0668168f : 
                        0.066825f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06682023f : 
                0.06682825f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[21])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06685176f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.066747315f : 
                        -0.066747f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06674005f : 
                        -0.06673757f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                -0.06676578f : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[10])) ? 
                        -0.0667647f : 
                        -0.066733904f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
                        -0.06673754f : 
                        -0.06673304f)))) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[13])) ? 
                        -0.066739805f : 
                        -0.06673228f) : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[12])) ? 
                        -0.06673483f : 
                        -0.06673233f)) : 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[20])) ? 
                    -0.06673229f : 
                    -0.06673229f)) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                -0.06673229f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                    -0.06673229f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[12])) ? 
                        -0.06673229f : 
                        0.0511755f)))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {15, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, 3, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 1, 0, 0};
  // {10101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {21, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {15, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {32, 0, 0, 0};
  // {00100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {68, 0, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-33, 7, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {27, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067906424f : 
                        -0.066732295f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                        -0.06673229f : 
                        -0.06673215f)) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.066732295f : 
                        -0.066732205f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.06673228f : 
                        -0.06673203f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        -0.06673228f : 
                        -0.066732265f) : 
                    -0.06673213f) : 
                 (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[10])) ? 
                        -0.06673229f : 
                        -0.06673224f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                        -0.066732295f : 
                        -0.06673215f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.06673229f : 
                    -0.066732205f) : 
                -0.06673212f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.069438316f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[12])) ? 
                        -0.06709016f : 
                        0.06689885f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[13])) ? 
                        0.066799f : 
                        0.06680595f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06681374f : 
                        0.06682764f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {01111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {126, 3, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 1, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, 7, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {96, 20, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {55, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-17, 7, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067951605f : 
                        -0.06674714f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06674279f : 
                        -0.066732645f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.066838086f : 
                        0.067161344f) : 
                    0.069601946f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.066798f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06679871f : 
                        0.06679903f)) : 
                0.06680028f)) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[21])) ? 
                        0.066798046f : 
                        0.066798545f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.066798f : 
                        0.06680598f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06679846f : 
                        0.06680082f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.066798024f : 
                        0.066805206f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06680103f : 
                0.066808045f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06682383f : 
                        -0.06676122f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        -0.06673724f : 
                        -0.066737235f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.066731535f : 
                        -0.06673002f) : 
                     (Double.isNaN(data[16 /* C18 */]) || !GenModel.bitSetIsInRange(32, 0, data[16]) || (data[16] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[16]) && (data[16] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[16])) ? 
                        -0.06673098f : 
                        -0.06672543f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[12])) ? 
                    -0.0667556f : 
                    -0.06674005f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[10 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[10])) ? 
                        -0.06675032f : 
                        -0.06672538f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                        -0.06672671f : 
                        -0.06672468f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
             (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                        -0.06672748f : 
                        -0.06672428f) : 
                    -0.06672428f) : 
                -0.06672428f) : 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[14])) ? 
                -0.06672428f : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                    -0.06672428f : 
                    0.039522197f))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00010001 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, 2, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {01111111 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 5, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {34, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {15, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 23, 0, 0};
  // {00010000 00011000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {8, 24, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 2, 0, 0};
  // {11111011 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 7, 0, 0};
  // {11111111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 30, 0, 0};
  // {11101101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-73, 3, 0, 0};
  // {11100111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-25, 7, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[21])) ? 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.06761339f : 
                        -0.0667241f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.0667241f : 
                        -0.066724025f)) : 
                 (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[12])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[21])) ? 
                        -0.06672409f : 
                        -0.06672405f) : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[21])) ? 
                        -0.06672406f : 
                        -0.066723965f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                 (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (Double.isNaN(data[1 /* C3 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.06672406f : 
                        -0.066724055f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06672408f : 
                        -0.06672399f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[20])) ? 
                        -0.0667241f : 
                        -0.0667241f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                        -0.066723995f : 
                        -0.06672387f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[8])) ? 
                        -0.06672409f : 
                        -0.06672409f) : 
                    -0.06672402f) : 
                -0.06672395f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                    -0.06908825f : 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[12])) ? 
                        -0.06703722f : 
                        0.06686988f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[14])) ? 
                        0.06678245f : 
                        0.06678854f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                        0.06679535f : 
                        0.06680749f)))));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 26, static init size = 780B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {72, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {9, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {32, 0, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {125, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06784913f : 
                        -0.06673703f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066733286f : 
                        -0.066724405f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.06681673f : 
                        0.06709945f) : 
                    0.06923067f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06678158f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06678221f : 
                        0.06678248f)) : 
                0.066783585f)) : 
         (Double.isNaN(data[10 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (data[10] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[10]) && (data[10] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[10])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.066781625f : 
                        0.06678208f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06678159f : 
                        0.06678857f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06678199f : 
                        0.06678405f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.0667816f : 
                        0.06678788f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06678423f : 
                0.06679037f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[21])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.06680807f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06672843f : 
                        -0.06672818f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.06672286f : 
                        -0.06672096f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                -0.066742614f : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.06674178f : 
                        -0.06671816f) : 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[14])) ? 
                        -0.066720955f : 
                        -0.06671751f)))) : 
         (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
             (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[13])) ? 
                        -0.066722676f : 
                        -0.06671692f) : 
                     (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[19])) ? 
                        -0.066721044f : 
                        -0.06671745f)) : 
                 (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.06671839f : 
                        -0.06671692f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        -0.06671692f : 
                        -0.06671692f))) : 
            0.04640366f));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {15, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, 3, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, 3, 0, 0};
  // {01100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {70, 0, 0, 0};
  // {10101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {21, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 3, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 2, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {63, 0, 0, 0};
  // {00010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {40, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[21])) ? 
             (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                        -0.067531034f : 
                        -0.066716924f) : 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                        -0.066716924f : 
                        -0.066716835f)) : 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.066716924f : 
                        -0.0667169f) : 
                     (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.0667169f : 
                        -0.066716805f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                 (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[12])) ? 
                        -0.066716895f : 
                        -0.06671682f) : 
                     (!Double.isNaN(data[1 /* C3 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06671691f : 
                        -0.06671683f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                    -0.066716924f : 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        -0.06671684f : 
                        -0.06671677f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                    -0.066716924f : 
                    -0.06671686f) : 
                -0.0667168f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                    -0.06878288f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[11])) ? 
                        -0.06699091f : 
                        0.066844516f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[14])) ? 
                        0.06676801f : 
                        0.0667733f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[2])) ? 
                        0.06677926f : 
                        0.06678988f)))));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 24, static init size = 720B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 3, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 20, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 7, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067742944f : 
                        -0.06672825f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.06672496f : 
                        -0.06671719f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06679804f : 
                        0.06704532f) : 
                    0.068902105f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.06676722f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06676777f : 
                        0.066768005f)) : 
                0.06676897f)) : 
         (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.06676726f : 
                        0.066767655f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06676722f : 
                        0.06677333f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06676757f : 
                        0.06676938f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06676724f : 
                        0.06677274f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06676954f : 
                0.06677491f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[18 /* C20 */]) || !GenModel.bitSetIsInRange(32, 0, data[18]) || (data[18] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[18]) && (data[18] < 6) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[18])) ? 
         (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[14])) ? 
             (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06674478f : 
                 (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[11])) ? 
                    -0.06675125f : 
                     (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -0.066722944f : 
                        -0.06672041f))) : 
             (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[20])) ? 
                 (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                    -0.06679078f : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06672062f : 
                        -0.06671487f)) : 
                 (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[14])) ? 
                    -0.06672258f : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.06671217f : 
                        -0.06671107f)))) : 
         (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
             (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[14])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[21])) ? 
                        -0.06671357f : 
                        -0.06671064f) : 
                     (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[13])) ? 
                        -0.066711456f : 
                        -0.06671064f)) : 
                -0.06671064f) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                -0.06671064f : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[13])) ? 
                    -0.06671064f : 
                     (Double.isNaN(data[21 /* C23 */]) || !GenModel.bitSetIsInRange(32, 0, data[21]) || (data[21] >= 8) || (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[21])) ? 
                        -0.06671064f : 
                        0.0499667f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {00100100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-17, 3, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {111, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {29, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 7, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 1, 0, 0};
  // {00011100 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {56, 2, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-64, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {11111111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 30, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-2, 3, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 1, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-64, 0, 0, 0};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {5, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[21])) ? 
             (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[14 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                        -0.0674481f : 
                        -0.06671065f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.066710636f : 
                        -0.06671058f)) : 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06671065f : 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06671062f : 
                        -0.066710584f))) : 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[20])) ? 
                     (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[20])) ? 
                        -0.06671062f : 
                        -0.06671061f) : 
                    -0.06671056f) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                    -0.06671065f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06671057f : 
                        -0.06671048f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                    -0.06671064f : 
                    -0.06671059f) : 
                -0.06671054f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                    -0.06851637f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[11])) ? 
                        -0.06695039f : 
                        0.06682231f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[14])) ? 
                        0.06675537f : 
                        0.06675998f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.0667652f : 
                        0.066774465f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, 0, 0, 0};
  // {00100000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 2, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {80, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {11111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {63, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {96, 20, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.067613855f : 
                        -0.06672052f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066717684f : 
                        -0.06671088f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                        -0.06678167f : 
                        0.066997975f) : 
                    0.0686203f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.066754654f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06675513f : 
                        0.06675535f)) : 
                0.06675619f)) : 
         (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[20])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.06675469f : 
                        0.066755034f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.06675466f : 
                        0.06676f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06675497f : 
                        0.06675654f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06675468f : 
                        0.06675948f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06675668f : 
                0.06676138f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {72, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_0.score0(fdata);
    preds[2] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_1.score0(fdata);
    preds[3] += gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_2.score0(fdata);
  }
}
class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
         (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[20])) ? 
             (!Double.isNaN(data[6 /* C8 */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                -0.066775575f : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                        -0.06671397f : 
                        -0.06671378f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                        -0.066709705f : 
                        -0.06670825f))) : 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[12])) ? 
                    -0.06672632f : 
                    -0.06671726f) : 
                 (!Double.isNaN(data[12 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.06672276f : 
                        -0.06670602f) : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06670702f : 
                        -0.06670556f)))) : 
         (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
             (!Double.isNaN(data[13 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                        -0.066706754f : 
                        -0.06670528f) : 
                    -0.06670528f) : 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.06670528f : 
                        -0.06670528f) : 
                    -0.06670528f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[13])) ? 
                    -0.06670528f : 
                    -0.06670528f) : 
                 (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[13])) ? 
                    -0.06670528f : 
                    0.04531903f))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-120, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {125, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 7, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 0, 0, 0};
  // {10111111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 7, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {15, 0, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, 3, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 23, 0, 0};
  // {00010000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 2, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-9, 7, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 23, 0, 0};
  // {11111111 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 27, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {20, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 1, 0, 0};
  // {00000011 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {-64, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C6 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
             (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                    -0.067562394f : 
                    -0.06670516f) : 
                 (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[12])) ? 
                     (!Double.isNaN(data[9 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[9]) && (data[9] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[9])) ? 
                        -0.06670516f : 
                        -0.06670514f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.06670516f : 
                        -0.06670501f))) : 
             (Double.isNaN(data[6 /* C8 */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (data[6] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[6]) && (data[6] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                     (Double.isNaN(data[12 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (data[12] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[12]) && (data[12] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[12])) ? 
                        -0.066705145f : 
                        -0.06670506f) : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        -0.06670512f : 
                        -0.06670509f)) : 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                    -0.06670514f : 
                     (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                        -0.06670508f : 
                        -0.066705f)))) : 
         (!Double.isNaN(data[19 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[19])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                    -0.06670515f : 
                    -0.06670511f) : 
                -0.066705056f) : 
             (!Double.isNaN(data[7 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[20 /* C22 */]) && (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[20])) ? 
                    -0.06828371f : 
                     (!Double.isNaN(data[11 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[11])) ? 
                        -0.06691494f : 
                        0.06680289f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[20])) ? 
                     (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[13])) ? 
                        0.06674429f : 
                        0.06674832f) : 
                     (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.06675288f : 
                        0.06676099f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {41, 0, 0, 0};
  // {11101111 01111000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 30, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-6, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11101111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, 7, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00000110 00101000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {96, 20, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 7, 0, 0};
  // {00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 4, 0, 0};
  // {11111011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {125, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {29, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 0, 0, 0};
  // {00001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {48, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {9, 0, 0, 0};
}

class gbm_1e209b85_646f_4ede_a40e_b3d4e715993e_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[19 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[19]) || (data[19] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[19]) && (data[19] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[19])) ? 
             (Double.isNaN(data[7 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (data[7] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[7]) && (data[7] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[0 /* C2 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06763091f : 
                        -0.06671379f) : 
                     (!Double.isNaN(data[21 /* C23 */]) && (GenModel.bitSetIsInRange(32, 0, data[21]) && (data[21] < 8) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[21])) ? 
                        -0.066711314f : 
                        -0.06670536f)) : 
                 (Double.isNaN(data[20 /* C22 */]) || !GenModel.bitSetIsInRange(32, 0, data[20]) || (data[20] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[20]) && (data[20] < 7) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[20])) ? 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                        -0.066767335f : 
                        0.06695656f) : 
                    0.06837433f)) : 
             (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                    0.066743664f : 
                     (!Double.isNaN(data[8 /* C10 */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                        0.06674408f : 
                        0.06674427f)) : 
                0.066745f)) : 
         (Double.isNaN(data[13 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (data[13] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[13]) && (data[13] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
             (Double.isNaN(data[8 /* C10 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (data[8] >= 13) || (GenModel.bitSetIsInRange(32, 0, data[8]) && (data[8] < 13) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                 (Double.isNaN(data[2 /* C4 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 11) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                        0.066743694f : 
                        0.06674399f) : 
                     (Double.isNaN(data[11 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (data[11] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[11]) && (data[11] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[11])) ? 
                        0.066743664f : 
                        0.06674834f)) : 
                 (Double.isNaN(data[4 /* C6 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[4])) ? 
                     (Double.isNaN(data[14 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (data[14] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[14]) && (data[14] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[14])) ? 
                        0.06674405f : 
                        0.06674531f) : 
                     (!Double.isNaN(data[2 /* C4 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 11) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06674368f : 
                        0.06674788f))) : 
             (Double.isNaN(data[0 /* C2 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 7) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 7) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                0.06674544f : 
                0.06674955f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01101001 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-106, 3, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01011111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, 7, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {119, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 23, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 9, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {11110111 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, 7, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {8, 0, 0, 0};
}


