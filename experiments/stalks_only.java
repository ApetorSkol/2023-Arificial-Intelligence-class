/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2023-06-10T16:03:43.823+01:00
  3.40.0.4
  
  Standalone prediction code with sample test data for GBMModel named gbm_a345d634_bdfe_48a0_9edb_413350fb474c

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.1.179:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.1.179:54321/3/Models.java/gbm-a345d634-bdfe-48a0-9edb-413350fb474c > gbm_a345d634_bdfe_48a0_9edb_413350fb474c.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_a345d634_bdfe_48a0_9edb_413350fb474c.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_a345d634_bdfe_48a0_9edb_413350fb474c", algorithm="gbm")
public class gbm_a345d634_bdfe_48a0_9edb_413350fb474c extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 6; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_a345d634_bdfe_48a0_9edb_413350fb474c.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C11 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_0.VALUES,
    /* C12 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_1.VALUES,
    /* C13 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_2.VALUES,
    /* C14 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_3.VALUES,
    /* C15 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_4.VALUES,
    /* C16 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_5.VALUES,
    /* C1 */ gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_6.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.0,0.5205005763214227,0.4794994236785773};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.0,0.5205005763214227,0.4794994236785773};

  public gbm_a345d634_bdfe_48a0_9edb_413350fb474c() { super(NAMES,DOMAINS,"C1"); }
  public String getUUID() { return Long.toString(-6609293374624799752L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_0.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_1.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_2.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_3.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_4.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_5.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_6.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_7.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_8.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_9.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_10.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_11.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_12.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_13.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_14.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_15.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_16.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_17.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_18.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_19.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_20.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_21.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_22.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_23.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_24.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_25.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_26.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_27.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_28.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_29.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_30.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_31.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_32.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_33.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_34.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_35.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_36.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_37.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_38.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_39.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_40.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_41.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_42.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_43.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_44.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_45.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_46.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_47.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_48.score0(data,preds);
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_49.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_a345d634_bdfe_48a0_9edb_413350fb474c implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    NamesHolder_gbm_a345d634_bdfe_48a0_9edb_413350fb474c_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_a345d634_bdfe_48a0_9edb_413350fb474c_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C11";
      sa[1] = "C12";
      sa[2] = "C13";
      sa[3] = "C14";
      sa[4] = "C15";
      sa[5] = "C16";
    }
  }
}
// The class representing column C11
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "e";
      sa[1] = "stalk-shape";
      sa[2] = "t";
    }
  }
}
// The class representing column C12
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[6];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "?";
      sa[1] = "b";
      sa[2] = "c";
      sa[3] = "e";
      sa[4] = "r";
      sa[5] = "stalk-root";
    }
  }
}
// The class representing column C13
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "f";
      sa[1] = "k";
      sa[2] = "s";
      sa[3] = "stalk-surface-above-ring";
      sa[4] = "y";
    }
  }
}
// The class representing column C14
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "f";
      sa[1] = "k";
      sa[2] = "s";
      sa[3] = "stalk-surface-below-ring";
      sa[4] = "y";
    }
  }
}
// The class representing column C15
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_4_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "e";
      sa[3] = "g";
      sa[4] = "n";
      sa[5] = "o";
      sa[6] = "p";
      sa[7] = "stalk-color-above-ring";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C16
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "c";
      sa[2] = "e";
      sa[3] = "g";
      sa[4] = "n";
      sa[5] = "o";
      sa[6] = "p";
      sa[7] = "stalk-color-below-ring";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C1
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "class";
      sa[1] = "e";
      sa[2] = "p";
    }
  }
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_0_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_0_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.1f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.1f : 
                0.19999997f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.1f : 
                0.19999997f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.03636364f : 
                        0.19999997f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.18972601f : 
                        0.19999997f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.1f : 
                        0.19999997f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.11999998f : 
                        0.1903969f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                        -0.090396926f : 
                        -0.020000005f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.1f : 
                        0.19999997f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        -0.1f : 
                        -0.08972603f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.1f : 
                        0.13636363f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.1f : 
                0.19999997f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.1f : 
                0.19999997f) : 
            0.19999997f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_1_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_1_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.0938218f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.0938218f : 
                0.17063662f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.0938218f : 
                0.17063662f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.03051182f : 
                        0.17063662f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.16260241f : 
                        0.17063662f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.097076595f : 
                        0.17423622f) : 
                    0.17212099f))));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.09422866f : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.0948488f : 
                        -0.005650796f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                        -0.0938218f : 
                        -0.08322958f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.0938218f : 
                        0.1201554f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                -0.0938218f : 
                0.17063662f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                -0.0938218f : 
                0.17063662f) : 
            0.17063662f));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 11, static init size = 330B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_2_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_2_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.08909542f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.08909542f : 
                0.15059751f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.08909542f : 
                0.15059751f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.025153987f : 
                        0.15059751f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.14367712f : 
                        0.15059751f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.08603168f : 
                        0.15312561f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        0.15163481f : 
                        0.16210762f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.092624635f : 
                        -0.08941144f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.08990126f : 
                        -3.320791E-4f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        -0.08909542f : 
                        -0.077883005f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.08909542f : 
                        0.10759286f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.08909542f : 
                0.15059751f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.08909542f : 
                0.15059751f) : 
            0.15059751f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_3_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_3_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.085383825f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.085383825f : 
                0.13608365f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.085383825f : 
                0.13608365f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.02020469f : 
                        0.13608365f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.12970765f : 
                        0.13608365f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.09938579f : 
                        0.13560529f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.07712759f : 
                        0.1339864f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.07587738f : 
                        0.0034559711f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.08662827f : 
                        0.2038312f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        -0.085383825f : 
                        -0.073310144f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.085383825f : 
                        0.09752127f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.085383825f : 
                0.13608365f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.085383825f : 
                0.13608365f) : 
            0.13608365f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_4_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_4_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.082411855f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.082411855f : 
                0.12512094f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.082411855f : 
                0.12512094f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        0.005372202f : 
                        0.13240832f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        0.09208202f : 
                        0.12830335f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        0.12512094f : 
                        0.12610762f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        0.12512094f : 
                        0.13258253f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, 3, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, 3, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.085071675f : 
                        -0.082411855f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.082801126f : 
                        -0.082411855f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.08354998f : 
                        -0.013038104f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.0849913f : 
                        0.08281229f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.082411855f : 
                0.12512094f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.082411855f : 
                0.12512094f) : 
            0.12512094f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_5_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_5_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.07999611f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07999611f : 
                0.11657749f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.07999611f : 
                0.11657749f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.017706418f : 
                        0.11657749f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.11629381f : 
                        0.12240169f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.09354329f : 
                        0.11697324f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.06472968f : 
                        0.11498662f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.069062755f : 
                        0.011924737f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.08119432f : 
                        0.1707661f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                        -0.08127953f : 
                        -0.06741272f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.07999611f : 
                        0.08898164f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.07999611f : 
                0.11657749f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.07999611f : 
                0.11657749f) : 
            0.11657749f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_6_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_6_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.078008994f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.078008994f : 
                0.109756306f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.078008994f : 
                0.109756306f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.013342827f : 
                        0.109756306f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.10889725f : 
                        0.114641674f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.09922969f : 
                        0.11471598f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                        0.064633876f : 
                        0.10730975f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.08003337f : 
                        -0.078008994f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.07842328f : 
                        -0.078008994f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.07928979f : 
                        -0.0067624613f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.079976924f : 
                        0.07582534f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.078008994f : 
                0.109756306f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.078008994f : 
                0.109756306f) : 
            0.109756306f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_7_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_7_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.076358706f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.076358706f : 
                0.10420415f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.076358706f : 
                0.10420415f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.01139577f : 
                        0.10420415f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                        0.09975329f : 
                        0.10755569f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.08917374f : 
                        0.10596581f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.0579328f : 
                        0.10154651f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07810311f : 
                        -0.076358706f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.07672869f : 
                        -0.076358706f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.077548176f : 
                        -0.0040216693f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.07805525f : 
                        0.07157901f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.076358706f : 
                0.10420415f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.076358706f : 
                0.10420415f) : 
            0.10420415f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_8_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_8_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
            -0.074977346f : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.074977346f : 
                0.09961336f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.074977346f : 
                0.09961336f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                        -0.0095458655f : 
                        0.09961336f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.09965548f : 
                        0.10521771f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.086389795f : 
                        0.10103407f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.0541351f : 
                        0.096700974f)))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.07648946f : 
                        -0.074977346f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.07531073f : 
                        -0.074977346f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.07219905f : 
                        -0.002036437f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.07644866f : 
                        0.068015814f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.074977346f : 
                0.09961336f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.074977346f : 
                0.09961336f) : 
            0.09961336f));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_9_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_9_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.13966049f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.073813565f : 
                    0.09576764f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.073813565f : 
                0.09576764f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                -0.073813565f : 
                0.09576764f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                        -0.007797379f : 
                        0.09576764f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.09896472f : 
                        0.10040648f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.08401651f : 
                        0.09771348f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        0.051725473f : 
                        0.092633866f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.05850531f : 
                        0.022454908f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.075638145f : 
                        0.13617301f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.07643927f : 
                        -0.07573489f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.073813565f : 
                        0.075330526f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.073813565f : 
                0.09576764f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.073813565f : 
                0.09576764f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                    -0.073813565f : 
                    0.09576764f) : 
                0.17753698f)));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_10_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_10_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.13261053f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.072827764f : 
                    0.09251046f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.072827764f : 
                0.09251046f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                -0.072827764f : 
                0.09251046f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                        -0.0041195415f : 
                        0.09251046f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.095138565f : 
                        0.096328884f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.082099035f : 
                        0.09466193f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        0.049542405f : 
                        0.08848528f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.055286102f : 
                        0.023008613f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.074590325f : 
                        0.12850803f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.0750463f : 
                        -0.07445356f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.072827764f : 
                        0.070259355f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.072827764f : 
                0.09251046f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                -0.072827764f : 
                0.09251046f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                    -0.072827764f : 
                    0.09251046f) : 
                0.16738302f)));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_11_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_11_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.1251995f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.07198892f : 
                    0.08972576f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.07198892f : 
                0.08972576f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                -0.07198892f : 
                0.08972576f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        0.0038267025f : 
                        0.092808954f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.0691289f : 
                        0.09426582f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                    0.09073387f : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        0.08972576f : 
                        0.09286038f)))));
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.07323394f : 
                        -0.07198892f) : 
                    -0.07243587f) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.07390203f : 
                        0.003873568f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.07320664f : 
                        0.06648999f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                -0.07198892f : 
                0.08972576f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                -0.07198892f : 
                0.08972576f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                    -0.07198892f : 
                    0.08972576f) : 
                0.15791726f)));
    return pred;
  } // constant pool size = 119B, number of visited nodes = 13, static init size = 390B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_12_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_12_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.11789028f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.07127235f : 
                    0.087325655f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.07127235f : 
                0.087325655f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                -0.07127235f : 
                0.087325655f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                        -0.0021772478f : 
                        0.087325655f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.09025015f : 
                        0.09117932f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.09164195f : 
                        0.092695504f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                        0.051803045f : 
                        0.082723714f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[3])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.07351117f : 
                    -0.07303339f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                        -0.07189496f : 
                        -0.07127235f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        0.011214726f : 
                        0.05516229f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                -0.07127235f : 
                0.087325655f)) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                -0.07127235f : 
                0.087325655f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                    -0.07127235f : 
                    0.087325655f) : 
                0.14886653f)));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 12, static init size = 360B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_13_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_13_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.111049466f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.07065824f : 
                    0.08524239f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.07065824f : 
                0.08524239f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.0709164f : 
                    -0.07065824f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                    0.08524239f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        0.08524239f : 
                        0.08589139f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        5.215575E-4f : 
                        0.08524239f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.08770865f : 
                        0.08849388f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                        -0.08944857f : 
                        0.09050219f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[3])) ? 
                        0.049239803f : 
                        0.08022803f)))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {29, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.048427094f : 
                        0.02973134f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.07237898f : 
                        0.11603773f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.07257159f : 
                        -0.07216477f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.07065824f : 
                        0.062024556f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                        -0.071196206f : 
                        -0.07065824f) : 
                    -0.07065824f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                    0.08524239f : 
                    0.0867114f))) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                -0.07065824f : 
                0.08524239f) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                    -0.07065824f : 
                    0.08524239f) : 
                0.14025101f)));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_14_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_14_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.104887165f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.07013045f : 
                    0.08342289f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.07013045f : 
                0.08342289f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.07035241f : 
                    -0.07013045f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                    0.08342289f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        0.08342289f : 
                        0.08396447f))) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                        0.0037204986f : 
                        0.08623818f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        0.06304062f : 
                        0.08753005f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                        0.0843582f : 
                        0.084758945f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.08342289f : 
                        0.0860468f)))));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {29, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-17, 3, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.07126557f : 
                        -0.07013045f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                        -0.07086816f : 
                        -0.07053309f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.07215091f : 
                        0.009150693f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.07142831f : 
                        0.06273511f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                        -0.07059303f : 
                        -0.07013045f) : 
                    -0.07013045f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                    0.08342289f : 
                    0.08472033f))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    -0.07013045f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.077893086f : 
                        0.08342289f)) : 
                0.08342289f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                    -0.07013045f : 
                    0.08342289f) : 
                0.1084023f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {15, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_15_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_15_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.09972232f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06967577f : 
                        -0.06961233f) : 
                    0.08182503f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06967577f : 
                0.08182503f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06986706f : 
                    -0.06967577f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.08182503f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                        0.08182503f : 
                        0.0822787f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.002244705f : 
                        0.08182503f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.084413126f : 
                        0.08504446f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.07998281f : 
                        0.08438679f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.040595666f : 
                        0.07593513f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.070810735f : 
                        -0.07031117f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.070184976f : 
                        -0.06967577f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.07141778f : 
                        0.011235258f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                        -0.07079229f : 
                        0.058581993f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                        -0.07007446f : 
                        -0.06967577f) : 
                    -0.06967577f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                    0.08182503f : 
                    0.08297677f))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    -0.06967577f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.07684503f : 
                        0.08182503f)) : 
                0.08182503f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                    -0.06967577f : 
                    0.08182503f) : 
                0.10446698f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {15, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_16_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_16_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.09525684f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06928327f : 
                        -0.06917791f) : 
                    0.080414936f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06928327f : 
                0.080414936f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06944844f : 
                    -0.06928327f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.080414936f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                        0.080414936f : 
                        0.08079618f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.003586552f : 
                        0.080414936f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.08303261f : 
                        0.08360641f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.07852742f : 
                        0.08259713f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.038680427f : 
                        0.07395479f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.07126486f : 
                -0.07095246f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.070000805f : 
                        -0.06959927f) : 
                    -0.06928327f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.070066884f : 
                        -0.069627576f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.012555396f : 
                        0.05193321f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                    -0.06928327f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07592782f : 
                        0.080414936f)) : 
                0.080414936f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                    -0.06928327f : 
                    0.080414936f) : 
                0.10090715f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {55, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_17_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_17_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.09140867f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.068943836f : 
                        -0.0688125f) : 
                    0.07916507f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.068943836f : 
                0.07916507f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06914897f : 
                    -0.06900092f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.07916507f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                        0.07950204f : 
                        0.07977546f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0047591203f : 
                        0.07916507f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.08141243f : 
                        0.08190642f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.07728272f : 
                        0.081398085f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.03752873f : 
                        0.07228224f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {29, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.07065233f : 
                -0.07038391f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06958499f : 
                        -0.06923328f) : 
                    -0.068943836f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.06964211f : 
                        -0.069241695f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.01315041f : 
                        0.05042192f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                    -0.068943836f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.075118676f : 
                        0.07916507f)) : 
                0.07916507f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                    -0.068943836f : 
                    0.07916507f) : 
                0.09768715f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {55, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {15, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_18_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_18_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.08809696f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.06864984f : 
                        -0.06850418f) : 
                    0.07805285f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06864984f : 
                0.07805285f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06888458f : 
                    -0.06875173f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.07805285f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        0.07832076f : 
                        0.07890586f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0058515277f : 
                        0.07805285f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.07999013f : 
                        0.08041754f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.085636735f : 
                        0.06549131f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        0.080308385f : 
                        0.08338664f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.070125766f : 
                -0.06989457f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06922411f : 
                        -0.06891565f) : 
                    -0.06864984f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.003371544f : 
                        0.0791844f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        -0.069341846f : 
                        0.05361547f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                    -0.06864984f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.074400015f : 
                        0.07805285f)) : 
                0.07805285f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                    -0.06864984f : 
                    0.07805285f) : 
                0.09477655f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_19_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_19_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.085247315f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06839487f : 
                        -0.06824327f) : 
                    0.07705955f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06839487f : 
                0.07705955f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06859918f : 
                    -0.06848251f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.07705955f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        0.07728507f : 
                        0.07778372f))) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                        -0.08421975f : 
                        0.034236234f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.054344364f : 
                        0.08075304f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        0.07705955f : 
                        0.07820924f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.07864212f : 
                        0.07999233f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 1, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06967205f : 
                -0.06947249f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06892069f : 
                        -0.068648644f) : 
                    -0.06839487f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.06912031f : 
                        -0.0686174f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.012972131f : 
                        0.04930891f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                    -0.06839487f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.073758006f : 
                        0.07705955f)) : 
                0.07705955f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                    -0.06839487f : 
                    0.07705955f) : 
                0.092147976f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {55, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_20_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_20_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06817349f : 
                        -0.06802186f) : 
                    -0.067413464f) : 
                0.016014699f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06817349f : 
                0.07616959f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.068394706f : 
                    -0.068289965f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.07616959f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        0.076360464f : 
                        0.07707786f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.00633415f : 
                        0.07616959f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.07789517f : 
                        0.07823161f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.076902084f : 
                        0.07832351f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.036079913f : 
                        0.06790431f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.069338374f : 
                -0.06916125f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06863076f : 
                        -0.0683934f) : 
                    -0.06817349f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -7.944004E-4f : 
                        0.07739587f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        -0.06892462f : 
                        0.050702743f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                    -0.06817349f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.073181644f : 
                        0.07616959f)) : 
                0.07616959f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                    -0.06817349f : 
                    0.07616959f) : 
                0.08977618f)));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_21_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_21_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.082203776f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.06798108f : 
                        -0.06783349f) : 
                    0.07590943f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.06798108f : 
                0.07536982f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06817381f : 
                    -0.06808182f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.07536982f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        0.075530626f : 
                        0.076143995f))) : 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0036049997f : 
                        0.077383235f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.050950207f : 
                        0.07900014f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.07614491f : 
                        0.07701378f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[4])) ? 
                        0.07775745f : 
                        0.07884412f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.068991706f : 
                -0.06883835f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06872369f : 
                        -0.06814826f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.06818446f : 
                        -0.06798108f)) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                        -0.068293504f : 
                        -0.06798108f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        0.03434932f : 
                        0.042980015f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                    -0.06798108f : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.07267278f : 
                        0.07536982f)) : 
                0.07536982f) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    -0.06805414f : 
                    0.07536982f) : 
                0.088486224f)));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 16, static init size = 480B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {15, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_22_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_22_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.0678137f : 
                        -0.06767204f) : 
                    -0.06722843f) : 
                0.017697528f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                -0.0678137f : 
                0.074649155f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.068032146f : 
                    -0.06794861f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                    0.074649155f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        0.07478548f : 
                        0.07554132f))) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0084732175f : 
                        0.0746331f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                        0.07621938f : 
                        0.07648787f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.07598416f : 
                        0.076741755f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.032316834f : 
                        0.065309465f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {20, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06859891f : 
                        -0.06830387f) : 
                    -0.06795917f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                    -0.067990616f : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.06787726f : 
                        -0.0678137f))) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.06981682f : 
                        -0.069652684f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.040198926f : 
                        0.042176362f)) : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                        0.033092022f : 
                        0.09241003f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.06781161f : 
                        0.09765622f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                    -0.06849191f : 
                    -0.0678137f) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                    0.074649155f : 
                    0.07569904f)) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                0.074649155f : 
                0.07569904f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {66, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, 3, 0, 0};
  // {11110111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, 3, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_23_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_23_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.08097978f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.067706704f : 
                        -0.06766786f) : 
                    0.074904375f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.067706704f : 
                    -0.06766799f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07399814f : 
                    0.0741144f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06790522f : 
                    -0.06778543f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07399814f : 
                        0.07411374f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0741144f : 
                        0.07493429f))) : 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.059807826f : 
                        0.032179337f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.04865711f : 
                        0.077384986f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[5])) ? 
                        0.074776955f : 
                        0.075634696f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.07600058f : 
                        0.07742622f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {64, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06852537f : 
                -0.06840316f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06813335f : 
                        -0.067898385f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.067758486f : 
                        -0.06766799f)) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.003104633f : 
                        0.07547865f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        -0.0684824f : 
                        0.044796497f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                        -0.06777431f : 
                        -0.06766799f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.071982026f : 
                        0.07430923f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    0.07399814f : 
                    0.07430923f)) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                    -0.06777986f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                        0.07399814f : 
                        0.07430923f)) : 
                0.08722459f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {15, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_24_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_24_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.07909292f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06757479f : 
                        -0.067540735f) : 
                    0.074235074f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06757479f : 
                    -0.06754106f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07340868f : 
                    0.073508665f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06774811f : 
                    -0.06764289f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07340868f : 
                        0.073505975f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.07350868f : 
                        0.07421022f))) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.0812548f : 
                        0.029830348f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.047003333f : 
                        0.07660568f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[4])) ? 
                        0.074110135f : 
                        0.07485039f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.07439653f : 
                        0.076117404f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {64, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-9, 3, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06832729f : 
                -0.0682182f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06799743f : 
                        -0.06774175f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.06765763f : 
                        -0.06754106f)) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                        0.0050244606f : 
                        0.0747585f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        -0.06824988f : 
                        0.043597985f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                        -0.067633696f : 
                        -0.06754106f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.07157336f : 
                        0.07369257f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    0.07340868f : 
                    0.07369253f)) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                    -0.06763851f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                        0.07340868f : 
                        0.07369253f)) : 
                0.08531556f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {15, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_25_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_25_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.07746769f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06745983f : 
                        -0.06742998f) : 
                    0.07362881f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06745983f : 
                    -0.06743043f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.0728738f : 
                    0.0729599f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06761122f : 
                    -0.0675188f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.0728738f : 
                        0.072955735f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.07295989f : 
                        0.07356077f))) : 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.0037345144f : 
                        0.07503161f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.045431163f : 
                        0.07589453f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[5])) ? 
                        0.07350705f : 
                        0.07439426f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.07507712f : 
                        0.0763563f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {64, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06822554f : 
                        -0.06793352f) : 
                    -0.06752553f) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.06755518f : 
                    -0.06743043f)) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06815258f : 
                    -0.06805503f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        0.0074115433f : 
                        0.07410681f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.068050295f : 
                        0.041923027f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                        -0.067511186f : 
                        -0.06743043f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                        0.07120129f : 
                        0.07313334f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[3])) ? 
                    0.0728738f : 
                    0.07313328f)) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                    -0.06751536f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[3])) ? 
                        0.0728738f : 
                        0.07313328f)) : 
                0.083597325f)));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 1, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_26_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_26_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.0673596f : 
                        -0.06733344f) : 
                    -0.06699489f) : 
                0.019566942f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.0673596f : 
                    -0.06733395f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07238752f : 
                    0.07246171f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06749187f : 
                    -0.06741071f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07238752f : 
                        0.072456926f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.07246128f : 
                        0.07297673f))) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.080083854f : 
                        0.07326412f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        -0.058603197f : 
                        0.050972633f)) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.015700925f : 
                        0.074027926f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[3])) ? 
                        0.07396168f : 
                        0.07627842f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {55, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.067759134f : 
                        -0.06759199f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.067526594f : 
                        -0.06740398f)) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                    -0.0674427f : 
                    -0.06733395f)) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        -0.06895874f : 
                        -0.06886989f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.06793523f : 
                        0.036725566f)) : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                        0.031314548f : 
                        0.09411241f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                        0.0811978f : 
                        0.10034103f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        -0.06740439f : 
                        -0.06733395f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                        0.07086168f : 
                        0.072625175f)) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[3])) ? 
                    0.07238752f : 
                    0.07262509f)) : 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                    -0.06740801f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[3])) ? 
                        0.07238752f : 
                        0.07262509f)) : 
                0.08205093f)));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 1, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, 3, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-9, 3, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {2, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {16, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_27_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_27_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06727215f : 
                        -0.06724923f) : 
                    -0.06695369f) : 
                0.019979205f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06727215f : 
                    -0.06724978f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07194458f : 
                    0.07200856f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06741623f : 
                    -0.06734238f) : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                        0.07194458f : 
                        0.072008185f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        0.072076075f : 
                        0.072591454f))) : 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                        0.0043309107f : 
                        0.07407987f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.043204382f : 
                        0.07448069f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[5])) ? 
                        0.07262581f : 
                        0.0735123f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.07402628f : 
                        0.075302534f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {61, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {64, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[3])) ? 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.0680056f : 
                        -0.067754336f) : 
                    -0.06739017f) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.06735862f : 
                        -0.06734728f) : 
                    -0.06724978f)) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                        -0.068664744f : 
                        -0.06858765f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.03235463f : 
                        0.03504159f)) : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                        0.031727564f : 
                        0.0879313f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.06739872f : 
                        0.08973284f)))) : 
         (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                    -0.06768406f : 
                    -0.06724978f) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                    0.07194458f : 
                    0.07285714f)) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                0.07194458f : 
                0.07285714f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {66, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_28_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_28_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.076224275f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.0672131f : 
                        -0.06717632f) : 
                    0.07273247f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06721625f : 
                    -0.06717632f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.071540445f : 
                    0.071658105f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.067347266f : 
                    -0.06725713f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.071540445f : 
                        0.071652986f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.07165775f : 
                        0.072205015f))) : 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                        -0.055230036f : 
                        0.028296724f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.041719988f : 
                        0.07379799f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[5])) ? 
                        0.072200544f : 
                        0.0730347f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.073412165f : 
                        0.074758515f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 2, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 1, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {64, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06760564f : 
                        -0.06746254f) : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[3])) ? 
                        -0.06747649f : 
                        -0.06731083f)) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                    -0.06727126f : 
                    -0.06717632f)) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
                    -0.06774781f : 
                    -0.06767676f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.008078342f : 
                        0.07289009f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.0678068f : 
                        0.03911783f)))) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                    -0.06728861f : 
                    -0.06717632f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                    0.071540445f : 
                    0.07194988f)) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                    -0.067291304f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[3])) ? 
                        0.071540445f : 
                        0.07191682f)) : 
                0.08789292f)));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 1, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, 3, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {2, 0, 0, 0};
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {29, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_29_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_29_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.074947245f : 
                 (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.0671443f : 
                        -0.067112185f) : 
                    0.072266094f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06714704f : 
                    -0.067112185f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07117113f : 
                    0.07127282f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06726163f : 
                    -0.06718248f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07117113f : 
                        0.07126712f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0712725f : 
                        0.07174276f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.07409353f : 
                        0.07252615f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.071479306f : 
                        0.0729218f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.009592904f : 
                        0.07276385f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.028067019f : 
                        0.057657283f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {11111111 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {20, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06776711f : 
                    -0.06756034f) : 
                -0.06721888f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06719502f : 
                -0.067112185f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.068585165f : 
                        -0.067905426f) : 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.068543166f : 
                        -0.067690745f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06759267f : 
                        0.08023641f) : 
                    0.033600282f)) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        -0.06742827f : 
                        0.04827229f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.06786871f : 
                        0.096783295f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                    -0.06729533f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        0.0785237f : 
                        0.09236279f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-13, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_30_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_30_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.067095935f : 
                        -0.06706502f) : 
                    -0.06686333f) : 
                0.021350998f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06709592f : 
                    -0.0670647f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07088344f : 
                    0.0709825f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.067198634f : 
                    -0.067127675f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07083312f : 
                        0.07091523f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.070920676f : 
                        0.07141175f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.073075995f : 
                        0.072067946f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.071081415f : 
                        0.07235895f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.0016757281f : 
                        0.04002415f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.02804951f : 
                        0.056540668f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06740279f : 
                        -0.06728244f) : 
                    -0.06714141f) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.06713464f : 
                    -0.06705617f)) : 
             (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.067515664f : 
                    -0.06745984f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                        0.009341305f : 
                        0.07210345f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.0676087f : 
                        0.03634329f)))) : 
         (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                    -0.06719995f : 
                    -0.06710381f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                    0.070929624f : 
                    0.07128583f)) : 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
                    -0.067202225f : 
                     (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        0.07093321f : 
                        0.071285985f)) : 
                0.08378245f)));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {18, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 1, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {43, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {62, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_31_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_31_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06704198f : 
                        -0.06701498f) : 
                    -0.06683642f) : 
                0.021831563f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06704196f : 
                    -0.067014694f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.070566975f : 
                    0.07065267f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.067131825f : 
                    -0.06706952f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.070523344f : 
                        0.070593335f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.070599094f : 
                        0.071021795f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.07259084f : 
                        0.07165056f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.07078672f : 
                        0.071976736f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.011287852f : 
                        0.07200108f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.026702175f : 
                        0.055084437f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {5, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {20, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06759979f : 
                    -0.06742389f) : 
                -0.06708844f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.067081556f : 
                -0.06700724f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.06838473f : 
                        -0.067715496f) : 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.06820866f : 
                        -0.06751029f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06739492f : 
                        0.07824818f) : 
                    0.03119359f)) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        -0.06726428f : 
                        0.046866864f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.06758349f : 
                        0.09236762f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                    -0.067183696f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        0.077264436f : 
                        0.09059511f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-13, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_32_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_32_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.067002416f : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.06697824f : 
                        -0.06696797f)) : 
                -0.06681845f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.0670024f : 
                    -0.06697796f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.07031921f : 
                    0.0704027f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06708301f : 
                    -0.067027114f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.07023908f : 
                        0.07029886f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.070304565f : 
                        0.070741996f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.071793325f : 
                        0.07126955f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.070451364f : 
                        0.07150813f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.007769422f : 
                        0.0377555f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.026788633f : 
                        0.05400272f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.067494884f : 
                    -0.06733859f) : 
                -0.06703544f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06703495f : 
                -0.06696449f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.068232484f : 
                        -0.067596905f) : 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                        -0.06801186f : 
                        -0.06740366f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.06730299f : 
                        0.07760488f) : 
                    0.029726235f)) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        -0.06719696f : 
                        0.0458493f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.0674676f : 
                        0.08954302f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                    -0.06713589f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[3])) ? 
                        0.07636938f : 
                        0.088847466f)))));
    return pred;
  } // constant pool size = 164B, number of visited nodes = 18, static init size = 540B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {27, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-13, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_33_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_33_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06696729f : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.066945605f : 
                        -0.066928335f)) : 
                -0.06680251f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06696728f : 
                    -0.06694536f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.070088364f : 
                    0.070169665f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.06703964f : 
                    -0.06698946f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.0699779f : 
                        0.070028916f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.070034534f : 
                        0.07048327f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.07110977f : 
                        0.07092128f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.07014711f : 
                        0.071087435f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.009922396f : 
                        0.03641799f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.026887571f : 
                        0.052938543f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.067402475f : 
                    -0.06726348f) : 
                -0.06698913f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.066993885f : 
                -0.066927135f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06726938f : 
                    -0.0672297f) : 
                0.077069454f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.067196555f : 
                        -0.06709701f) : 
                    -0.066983886f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06777267f : 
                        0.046724215f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.029345473f : 
                        0.044067677f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_34_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_34_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06693561f : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06691696f : 
                        -0.06689398f)) : 
                -0.066797376f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06693559f : 
                    -0.066915944f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.06984642f : 
                    0.06991969f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.067000486f : 
                    -0.06695548f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.06973767f : 
                        0.069781154f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.0697867f : 
                        0.0702015f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.07065528f : 
                        0.07064905f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.06987033f : 
                        0.07070901f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.011888742f : 
                        0.035782795f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[2])) ? 
                        0.026019791f : 
                        0.051913653f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {27, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06732099f : 
                    -0.06719726f) : 
                -0.066948675f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06695766f : 
                -0.06689448f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06721115f : 
                    -0.067175314f) : 
                0.07656075f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06713797f : 
                        -0.06704933f) : 
                    -0.066944085f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06765808f : 
                        0.045782235f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.025967779f : 
                        0.042709038f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_35_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_35_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06690746f : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06689155f : 
                        -0.06686419f)) : 
                -0.06679202f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[3])) ? 
                    -0.06690744f : 
                    -0.06688982f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    0.06962361f : 
                    0.06968989f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[3])) ? 
                    -0.066965684f : 
                    -0.06692529f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[5])) ? 
                        0.06951647f : 
                        0.06955348f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.069558926f : 
                        0.069944195f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.07024994f : 
                        0.07039539f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                        0.06961846f : 
                        0.07036779f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                        0.030508295f : 
                        0.04239041f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[4])) ? 
                        0.070347294f : 
                        0.07214348f)))));
    return pred;
  } // constant pool size = 191B, number of visited nodes = 21, static init size = 630B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {27, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {80, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {61, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {-9, 3, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06724906f : 
                    -0.06713883f) : 
                -0.06691331f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06692568f : 
                -0.06686593f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06715883f : 
                    -0.067126445f) : 
                0.07607958f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.067086235f : 
                        -0.06700724f) : 
                    -0.0669093f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06755705f : 
                        0.044875357f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.022622004f : 
                        0.041407775f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_36_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_36_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06693162f : 
                        -0.066882424f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.066868365f : 
                        -0.0668666f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                    -0.06683836f : 
                    -0.0667865f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    -0.06688242f : 
                    -0.0668666f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                    0.06941816f : 
                    0.069478355f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[3])) ? 
                    -0.06693472f : 
                    -0.066898435f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.069312595f : 
                        0.06934404f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                        0.069349356f : 
                        0.06970877f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.069888085f : 
                        0.07015888f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                        0.06938891f : 
                        0.07005954f)) : 
                 (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        0.030219687f : 
                        0.04125946f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[4])) ? 
                        0.070067324f : 
                        0.07184544f)))));
    return pred;
  } // constant pool size = 209B, number of visited nodes = 23, static init size = 690B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {80, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {61, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-9, 3, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06719565f : 
                    -0.067079455f) : 
                -0.066882394f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                -0.06690196f : 
                -0.06684098f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.067108765f : 
                    -0.06707967f) : 
                0.0756544f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06704782f : 
                        -0.066976026f) : 
                    -0.066878885f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06746054f : 
                        0.043585565f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.019340478f : 
                        0.040391754f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_37_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_37_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.066919036f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06686022f : 
                        -0.06684784f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06681594f : 
                    -0.06678086f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.066860214f : 
                    -0.066846006f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.0692285f : 
                    0.06928337f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06690724f : 
                    -0.06687461f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.069124505f : 
                        0.06915117f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.069156334f : 
                        0.069493f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.069565766f : 
                        0.069938324f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.069179386f : 
                        0.069780566f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[4])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        0.030125424f : 
                        0.040173627f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[5])) ? 
                        0.07065298f : 
                        0.07242706f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {80, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {61, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 1, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.068411216f : 
                        -0.0016575744f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.06704537f : 
                        0.03246446f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06710268f : 
                    0.08243952f)) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                    -0.06734986f : 
                    -0.06718327f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        -0.06685537f : 
                        -0.066819154f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[5])) ? 
                        -0.0668523f : 
                        0.03781613f)))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
             (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                -0.06762676f : 
                -0.067042105f) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        0.020904629f : 
                        0.06970255f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[5])) ? 
                        0.06938737f : 
                        0.07747849f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.06708842f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[3])) ? 
                        0.07384041f : 
                        0.085021384f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {27, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {9, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {11111101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {30, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 2, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-5, 3, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_38_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_38_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.0668877f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06683605f : 
                        -0.06682518f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06680349f : 
                    -0.066765815f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06683599f : 
                    -0.06682353f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06906233f : 
                    0.069114536f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06688375f : 
                    -0.06685426f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06895083f : 
                        0.068973385f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.068978384f : 
                        0.069313884f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06918962f : 
                        0.06969278f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.068987995f : 
                        0.06952769f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        0.013659519f : 
                        0.031967606f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[2])) ? 
                        0.022030693f : 
                        0.048448697f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {61, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06713292f : 
                    -0.066994116f) : 
                -0.06683174f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06687404f : 
                -0.066800065f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06702449f : 
                    -0.06700094f) : 
                0.07475378f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06700268f : 
                        -0.06692891f) : 
                    -0.066829056f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06730879f : 
                        0.042859226f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.016929645f : 
                        0.038327716f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_39_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_39_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06687674f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06681871f : 
                        -0.066809475f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06678571f : 
                    -0.066760935f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.066818655f : 
                    -0.06680745f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.068898536f : 
                    0.06894628f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.0668616f : 
                    -0.066835076f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06879034f : 
                        0.06880937f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06881419f : 
                        0.06912826f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06893802f : 
                        0.06950195f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.068812706f : 
                        0.06929805f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.04812184f : 
                        0.07246024f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        0.027601777f : 
                        0.04748911f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06708297f : 
                    -0.06695895f) : 
                -0.06681108f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.066851825f : 
                -0.066783376f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06699126f : 
                    -0.066969894f) : 
                0.07436012f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06696671f : 
                        -0.06690078f) : 
                    -0.06680873f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06724685f : 
                        0.04206268f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.013818988f : 
                        0.03717233f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_40_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_40_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06686574f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06680323f : 
                        -0.06679545f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.066770256f : 
                    -0.066756025f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06680319f : 
                    -0.066793114f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.068747f : 
                    0.068790816f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06684183f : 
                    -0.06681796f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.068641916f : 
                        0.06865792f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06866255f : 
                        0.06895758f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06871278f : 
                        0.069323696f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.068652086f : 
                        0.06908922f)) : 
                 (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[4])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        0.027933223f : 
                        0.038047213f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[5])) ? 
                        0.07003308f : 
                        0.07164548f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {80, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {61, 0, 0, 0};
  // {00001000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {16, 1, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06703869f : 
                    -0.06692779f) : 
                -0.066793f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.066832125f : 
                -0.06676877f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06696235f : 
                    -0.06694288f) : 
                0.0736932f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06693483f : 
                        -0.06687585f) : 
                    -0.06679095f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06717544f : 
                        0.041172627f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.010836198f : 
                        0.036065314f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_41_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_41_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06685478f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06678944f : 
                        -0.06678293f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06675686f : 
                    -0.06675113f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.066789396f : 
                    -0.06678032f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06860665f : 
                    0.068647005f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.0668242f : 
                    -0.066802695f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06850455f : 
                        0.06851795f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.0685224f : 
                        0.0688004f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06851119f : 
                        0.069157116f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06850474f : 
                        0.068899035f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.045551274f : 
                        0.07175833f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        0.026813813f : 
                        0.045993976f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.067005396f : 
                    -0.06690439f) : 
                -0.0667772f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                -0.06681732f : 
                -0.066756f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06693333f : 
                    -0.06691577f) : 
                0.07337196f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.066910855f : 
                        -0.066849545f) : 
                    -0.066775404f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.067123f : 
                        0.040016435f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.007994115f : 
                        0.035228528f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_42_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_42_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06684396f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.066777155f : 
                        -0.06677171f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06674629f : 
                    -0.066745214f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06677712f : 
                    -0.066768944f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.068476565f : 
                    0.06851385f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06680849f : 
                    -0.066789106f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06837733f : 
                        0.068388514f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06839277f : 
                        0.068655446f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.068331026f : 
                        0.06900144f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06836942f : 
                        0.06872558f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.04233076f : 
                        0.071365535f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[5])) ? 
                        0.032235496f : 
                        0.07037456f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06696978f : 
                    -0.06687934f) : 
                -0.06676338f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                -0.06680148f : 
                -0.066744834f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.066909745f : 
                    -0.06689374f) : 
                0.07279657f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.0668852f : 
                        -0.06683028f) : 
                    -0.06676181f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06706713f : 
                        0.039214198f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.005300684f : 
                        0.034195717f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_43_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_43_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.066833325f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[3])) ? 
                        -0.06676617f : 
                        -0.06676166f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.066741526f : 
                    -0.0667351f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.066766135f : 
                    -0.06675877f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06835588f : 
                    0.068390444f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06679443f : 
                    -0.066776946f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06825944f : 
                        0.068268724f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.068272784f : 
                        0.0685216f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06816942f : 
                        0.06885585f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.068245f : 
                        0.06856717f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.039146513f : 
                        0.07100689f) : 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        0.02617777f : 
                        0.044399843f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {4, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06694151f : 
                    -0.06685248f) : 
                -0.06675129f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                -0.066788904f : 
                -0.06673507f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.0668871f : 
                    -0.06687259f) : 
                0.07228189f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06686484f : 
                        -0.066815004f) : 
                    -0.06674991f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        0.012512194f : 
                        0.06924712f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -0.002759681f : 
                        0.033361107f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_44_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_44_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.06682295f : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06675313f : 
                        -0.06675052f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06673688f : 
                    -0.066726305f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06675368f : 
                    -0.06674722f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06824384f : 
                    0.068275966f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.066778496f : 
                    -0.066763155f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.068150125f : 
                        0.068157785f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06816165f : 
                        0.06839783f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.068055585f : 
                        0.068719685f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.0681429f : 
                        0.0684449f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.0516554f : 
                        0.07071531f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[4])) ? 
                        0.030745132f : 
                        0.07017973f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06691297f : 
                    -0.06683314f) : 
                -0.06674071f) : 
             (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                -0.06677621f : 
                -0.06672651f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06686773f : 
                    -0.06685449f) : 
                0.071820326f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06684428f : 
                        -0.06679957f) : 
                    -0.06673951f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06700187f : 
                        0.03828916f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        -3.7147925E-4f : 
                        0.032404166f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_45_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_45_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                    -0.0668129f : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.06674504f : 
                        -0.06674224f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                    -0.06673237f : 
                    -0.06671867f)) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06674509f : 
                    -0.06673926f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06813975f : 
                    0.06816969f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06676749f : 
                    -0.06675364f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.068048716f : 
                        0.06805498f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06805866f : 
                        0.068283275f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.067921706f : 
                        0.06859224f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06803584f : 
                        0.0683094f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.048848353f : 
                        0.070410155f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[5])) ? 
                        0.030081622f : 
                        0.06998871f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 2, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06689031f : 
                    -0.0668178f) : 
                -0.06673145f) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                -0.06676613f : 
                -0.06671903f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.066849254f : 
                    -0.06683724f) : 
                0.071562946f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.066827945f : 
                        -0.0667828f) : 
                    -0.0667304f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.06696208f : 
                        0.037278146f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.0018662564f : 
                        0.031632584f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11111101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 2, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, 3, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_46_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_46_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06680321f : 
                        -0.06672802f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06673776f : 
                        -0.06673484f)) : 
                -0.066712014f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06673742f : 
                    -0.06673215f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06804297f : 
                    0.068070956f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06675766f : 
                    -0.06674515f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06795458f : 
                        0.06795965f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06796315f : 
                        0.06817711f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06780168f : 
                        0.06847297f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06793722f : 
                        0.06818534f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.046016272f : 
                        0.07013062f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[4])) ? 
                        0.02964241f : 
                        0.06990243f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.06686986f : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.066798724f : 
                    -0.06675703f)) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                -0.066723354f : 
                -0.06671249f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.06683258f : 
                    -0.06682166f) : 
                0.07131848f) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[4])) ? 
                        -0.06681321f : 
                        -0.06677217f) : 
                    -0.06672244f) : 
                 (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        -0.066927254f : 
                        0.036309518f) : 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.0039579147f : 
                        0.030889269f)))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-13, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {62, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_47_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_47_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06679391f : 
                        -0.06672384f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06673121f : 
                        -0.06672823f)) : 
                -0.06670622f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06673055f : 
                    -0.0667258f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.067952946f : 
                    0.067979164f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06674885f : 
                    -0.06673754f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.067867145f : 
                        0.06787122f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06787454f : 
                        0.06807865f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06769395f : 
                        0.068361305f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06784628f : 
                        0.06807162f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.030011708f : 
                        0.0698742f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[5])) ? 
                        0.029142428f : 
                        0.069697775f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06811967f : 
                        -0.06677372f) : 
                     (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.06835295f : 
                        0.015924182f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06695067f : 
                    0.07581009f)) : 
             (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[5])) ? 
                    -0.06671627f : 
                    -0.06670677f) : 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[3])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.06690098f : 
                        -0.06685988f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        0.06518323f : 
                        0.016751325f)))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
             (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[3])) ? 
                -0.06696869f : 
                -0.06677308f) : 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        0.020883363f : 
                        0.06853052f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[5])) ? 
                        0.06816741f : 
                        0.07187839f)) : 
                 (!Double.isNaN(data[0 /* C11 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                    -0.06732393f : 
                     (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[3])) ? 
                        0.0712026f : 
                        0.07725459f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 20, static init size = 600B
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {27, 0, 0, 0};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {9, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00000010 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 1, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, 2, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {30, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {11101100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {55, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {10111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {4, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {4, 0, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_48_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_48_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.06677825f : 
                        -0.066716574f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06672316f : 
                        -0.06672055f)) : 
                -0.06670291f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06672257f : 
                    -0.06671841f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.067870975f : 
                    0.06789599f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.06673885f : 
                    -0.0667289f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.06778592f : 
                        0.06778914f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.067798406f : 
                        0.06799767f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06756381f : 
                        0.068233624f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.067762375f : 
                        0.06796728f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.04023278f : 
                        0.06963869f) : 
                     (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[4])) ? 
                        0.027897893f : 
                        0.069547094f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {80, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.06683437f : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.06677141f : 
                    -0.066741355f)) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                -0.06671007f : 
                -0.066701755f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.066815674f : 
                    -0.06680586f) : 
                0.07069239f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        -0.06790086f : 
                        0.020969871f) : 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.06840249f : 
                        0.06886347f)) : 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        -0.06689736f : 
                        0.06992154f) : 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.06633653f : 
                        0.019766863f)))));
    return pred;
  } // constant pool size = 137B, number of visited nodes = 15, static init size = 450B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {62, 0, 0, 0};
  // {00001000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
}


class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_49_class_1.score0(fdata);
    preds[3] += gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_49_class_2.score0(fdata);
  }
}
class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[5])) ? 
             (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[3])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -0.066764325f : 
                        -0.06671031f) : 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06671621f : 
                        -0.06671382f)) : 
                -0.06669829f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[3])) ? 
                    -0.06671559f : 
                    -0.06671194f) : 
                 (Double.isNaN(data[3 /* C14 */]) || !GenModel.bitSetIsInRange(32, 0, data[3]) || (data[3] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[3])) ? 
                    0.06778454f : 
                    0.067806266f))) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[3])) ? 
                    -0.066729836f : 
                    -0.06672111f) : 
                 (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* C16 */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (data[5] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[5])) ? 
                        0.067710415f : 
                        0.06771291f) : 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[5])) ? 
                        0.067721225f : 
                        0.06789401f))) : 
             (!Double.isNaN(data[3 /* C14 */]) && (GenModel.bitSetIsInRange(32, 0, data[3]) && (data[3] < 5) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[3])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.06748974f : 
                        0.06814477f) : 
                     (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                        0.06769246f : 
                        0.06788522f)) : 
                 (!Double.isNaN(data[2 /* C13 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.037639055f : 
                        0.069444194f) : 
                     (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        0.026152745f : 
                        0.06780072f)))));
    return pred;
  } // constant pool size = 200B, number of visited nodes = 22, static init size = 660B
  // {10111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {29, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, 0, 0};
  // {00000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
  // {01111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {62, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 1, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {8, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {4, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {30, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {8, 0, 0, 0};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {20, 0, 0, 0};
}

class gbm_a345d634_bdfe_48a0_9edb_413350fb474c_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[4 /* C15 */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
         (Double.isNaN(data[4 /* C15 */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (data[4] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[4]) && (data[4] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                -0.066819355f : 
                 (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[5])) ? 
                    -0.066762015f : 
                    -0.066734664f)) : 
             (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                -0.066704646f : 
                -0.066697374f)) : 
         (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                    -0.066802345f : 
                    -0.066793405f) : 
                0.07048795f) : 
             (Double.isNaN(data[0 /* C11 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[5 /* C16 */]) && (GenModel.bitSetIsInRange(32, 0, data[5]) && (data[5] < 10) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[5])) ? 
                        -0.06777905f : 
                        0.021151016f) : 
                     (Double.isNaN(data[2 /* C13 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 5) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 5) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        0.0682844f : 
                        0.06871313f)) : 
                 (Double.isNaN(data[1 /* C12 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 6) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[1 /* C12 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 6) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                        0.0057251616f : 
                        0.04217205f) : 
                    0.017742753f))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-45, 3, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
  // {11010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {43, 0, 0, 0};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {27, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 0, 0};
}


