/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2023-06-10T16:09:43.775+01:00
  3.40.0.4
  
  Standalone prediction code with sample test data for GBMModel named gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.1.179:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.1.179:54321/3/Models.java/gbm-5ad6876d-c43d-4b93-b404-2908a71fe19f > gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f", algorithm="gbm")
public class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 3; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C9 */ gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_0.VALUES,
    /* C19 */ gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_1.VALUES,
    /* C21 */ gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_2.VALUES,
    /* C1 */ gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_3.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.0,0.5205005763214227,0.4794994236785773};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.0,0.5205005763214227,0.4794994236785773};

  public gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f() { super(NAMES,DOMAINS,"C1"); }
  public String getUUID() { return Long.toString(6247517660100593868L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_0.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_1.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_2.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_3.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_4.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_5.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_6.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_7.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_8.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_9.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_10.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_11.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_12.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_13.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_14.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_15.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_16.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_17.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_18.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_19.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_20.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_21.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_22.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_23.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_24.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_25.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_26.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_27.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_28.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_29.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_30.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_31.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_32.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_33.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_34.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_35.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_36.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_37.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_38.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_39.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_40.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_41.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_42.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_43.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_44.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_45.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_46.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_47.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_48.score0(data,preds);
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_49.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    NamesHolder_gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C9";
      sa[1] = "C19";
      sa[2] = "C21";
    }
  }
}
// The class representing column C9
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "gill-size";
      sa[2] = "n";
    }
  }
}
// The class representing column C19
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "n";
      sa[1] = "o";
      sa[2] = "ring-number";
      sa[3] = "t";
    }
  }
}
// The class representing column C21
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "b";
      sa[1] = "h";
      sa[2] = "k";
      sa[3] = "n";
      sa[4] = "o";
      sa[5] = "r";
      sa[6] = "spore-print-color";
      sa[7] = "u";
      sa[8] = "w";
      sa[9] = "y";
    }
  }
}
// The class representing column C1
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "class";
      sa[1] = "e";
      sa[2] = "p";
    }
  }
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_0_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_0_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.1f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.091279075f : 
                    0.19999997f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.1f : 
                0.19999997f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.039705887f : 
                    -0.010743807f) : 
                0.19999997f) : 
            0.19999997f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.1f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.1f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.11074379f : 
                    0.13970587f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.1f : 
                0.19999997f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.1f : 
                    0.19127905f) : 
                0.19999997f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_1_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_1_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.0938218f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.084820986f : 
                    0.17063662f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.0938218f : 
                0.17063662f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.033708215f : 
                    -0.0064357487f) : 
                0.17063662f) : 
            0.17063662f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.0938218f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.0938218f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.09925592f : 
                    0.122854464f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.0938218f : 
                0.17063662f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.0938218f : 
                    0.1638194f) : 
                0.17063662f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_2_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_2_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.08909542f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.079553254f : 
                    0.15059751f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.08909542f : 
                0.15059751f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.02821934f : 
                    -0.0025343704f) : 
                0.15059751f) : 
            0.15059751f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.08909542f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.08909542f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.08993327f : 
                    0.10987365f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.08909542f : 
                0.15059751f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.08909542f : 
                    0.14472277f) : 
                0.15059751f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_3_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_3_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.085383825f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.07508986f : 
                    0.13608365f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.085383825f : 
                0.13608365f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.023142798f : 
                    9.962525E-4f) : 
                0.13608365f) : 
            0.13608365f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.085383825f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.085383825f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.08219445f : 
                    0.09951516f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.085383825f : 
                0.13608365f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.085383825f : 
                    0.13066599f) : 
                0.13608365f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_4_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_4_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.082411855f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.071179606f : 
                    0.12512094f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.082411855f : 
                0.12512094f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.018418493f : 
                    0.004183705f) : 
                0.12512094f) : 
            0.12512094f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.082411855f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.082411855f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.07565275f : 
                    0.09101803f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.082411855f : 
                0.12512094f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.082411855f : 
                    0.11988296f) : 
                0.12512094f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_5_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_5_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07999611f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.06764928f : 
                    0.11657749f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.07999611f : 
                0.11657749f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.014009495f : 
                    0.007050687f) : 
                0.11657749f) : 
            0.11657749f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.07999611f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07999611f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.070040725f : 
                    0.083891876f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.07999611f : 
                0.11657749f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.07999611f : 
                    0.11134454f) : 
                0.11657749f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_6_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_6_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.078008994f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.06437391f : 
                    0.109756306f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.078008994f : 
                0.109756306f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.009893715f : 
                    0.0096172f) : 
                0.109756306f) : 
            0.109756306f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.078008994f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.078008994f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.06516746f : 
                    0.077806786f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.078008994f : 
                0.109756306f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.078008994f : 
                    0.104409054f) : 
                0.109756306f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_7_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_7_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.076358706f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.06126007f : 
                    0.10420415f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.076358706f : 
                0.10420415f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.0060582515f : 
                    0.011901935f) : 
                0.10420415f) : 
            0.10420415f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.076358706f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.076358706f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.06089288f : 
                    0.072532795f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.076358706f : 
                0.10420415f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.076358706f : 
                    0.09865512f) : 
                0.10420415f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_8_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_8_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.074977346f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.05823603f : 
                    0.09961336f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.074977346f : 
                0.09961336f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.0024955887f : 
                    0.013922942f) : 
                0.09961336f) : 
            0.09961336f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.074977346f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.074977346f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.057111777f : 
                    0.067905106f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.074977346f : 
                0.09961336f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.074977346f : 
                    0.09379428f) : 
                0.09961336f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_9_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_9_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.073813565f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.055245683f : 
                    0.09576764f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.073813565f : 
                0.09576764f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    7.9910783E-4f : 
                    0.01569801f) : 
                0.09576764f) : 
            0.09576764f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.073813565f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.073813565f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.053743437f : 
                    0.06380251f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.073813565f : 
                0.09576764f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.073813565f : 
                    0.08962235f) : 
                0.09576764f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_10_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_10_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.072827764f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.052244812f : 
                    0.09251046f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.072827764f : 
                0.09251046f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.0038298876f : 
                    0.017244808f) : 
                0.09251046f) : 
            0.09251046f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.072827764f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.072827764f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.050724737f : 
                    0.06013414f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.072827764f : 
                0.09251046f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.072827764f : 
                    0.0859907f) : 
                0.09251046f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_11_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_11_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07198892f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.049198773f : 
                    0.08972576f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.07198892f : 
                0.08972576f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.006601201f : 
                    0.018580837f) : 
                0.08972576f) : 
            0.08972576f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.07198892f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07198892f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.04800554f : 
                    0.056830414f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.07198892f : 
                0.08972576f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.07198892f : 
                    0.08278856f) : 
                0.08972576f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_12_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_12_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07127235f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.04608103f : 
                    0.087325655f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.07127235f : 
                0.087325655f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.009118661f : 
                    0.019723346f) : 
                0.087325655f) : 
            0.087325655f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.07127235f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07127235f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.045545295f : 
                    0.05383723f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.07127235f : 
                0.087325655f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.07127235f : 
                    0.079931706f) : 
                0.087325655f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_13_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_13_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07065824f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.042872325f : 
                    0.08524239f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.07065824f : 
                0.08524239f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.011389454f : 
                    0.020689167f) : 
                0.08524239f) : 
            0.08524239f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.07065824f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07065824f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.043310802f : 
                    0.051111788f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.07065824f : 
                0.08524239f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.07065824f : 
                    0.07735506f) : 
                0.08524239f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_14_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_14_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.07013045f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.039560217f : 
                    0.08342289f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.07013045f : 
                0.08342289f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.013422455f : 
                    0.021494575f) : 
                0.08342289f) : 
            0.08342289f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.07013045f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.07013045f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.041274536f : 
                    0.04861968f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.07013045f : 
                0.08342289f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.07013045f : 
                    0.075007536f) : 
                0.08342289f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_15_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_15_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06967577f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.036138795f : 
                    0.08182503f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06967577f : 
                0.08182503f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.015228083f : 
                    0.022155162f) : 
                0.08182503f) : 
            0.08182503f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06967577f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06967577f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.039413333f : 
                    0.046332926f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06967577f : 
                0.08182503f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.06967577f : 
                    0.07284861f) : 
                0.08182503f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_16_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_16_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06928327f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.032608528f : 
                    0.080414936f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06928327f : 
                0.080414936f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.016818192f : 
                    0.022685684f) : 
                0.080414936f) : 
            0.080414936f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06928327f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06928327f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.037707545f : 
                    0.04422832f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06928327f : 
                0.080414936f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.06928327f : 
                    0.07084578f) : 
                0.080414936f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_17_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_17_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.068943836f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.028976051f : 
                    0.07916507f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.068943836f : 
                0.07916507f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.018205691f : 
                    0.023100045f) : 
                0.07916507f) : 
            0.07916507f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.068943836f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.068943836f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.036140356f : 
                    0.042286474f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.068943836f : 
                0.07916507f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.068943836f : 
                    0.068972774f) : 
                0.07916507f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_18_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_18_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06864984f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.025253914f : 
                    0.07805285f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06864984f : 
                0.07805285f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.01940424f : 
                    0.02341117f) : 
                0.07805285f) : 
            0.07805285f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06864984f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06864984f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.034697223f : 
                    0.040490914f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06864984f : 
                0.07805285f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.06864984f : 
                    0.067208216f) : 
                0.07805285f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_19_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_19_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06839487f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.021460157f : 
                    0.07705955f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06839487f : 
                0.07705955f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.020427933f : 
                    0.02363102f) : 
                0.07705955f) : 
            0.07705955f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06839487f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06839487f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.03336548f : 
                    0.03882749f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06839487f : 
                0.07705955f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    -0.06839487f : 
                    0.06553465f) : 
                0.07705955f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_20_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_20_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06817349f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    -0.017617656f : 
                    0.07616959f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06817349f : 
                0.07616959f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                    0.021291042f : 
                    0.02377059f) : 
                0.07616959f) : 
            0.07616959f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06817349f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06817349f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.032134064f : 
                    0.037283882f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06817349f : 
                0.07616959f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                    -0.06817349f : 
                    0.07616959f) : 
                0.064121194f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_21_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_21_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06799543f : 
                    -0.06798108f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    -0.013744573f : 
                    0.07536982f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06798108f : 
                0.07536982f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.022007644f : 
                    0.023839902f) : 
                0.07536982f) : 
            0.07536982f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06798108f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06798108f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.030993171f : 
                    0.035849325f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06798108f : 
                0.07536982f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                    -0.06798108f : 
                    0.07536982f) : 
                0.06259597f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_22_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_22_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.067839816f : 
                    -0.0678137f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    -0.0098785125f : 
                    0.074649155f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.0678137f : 
                0.074649155f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.022591498f : 
                    0.023848047f) : 
                0.074649155f) : 
            0.074649155f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.0678137f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.0678137f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
                    0.029934179f : 
                    0.03451427f))) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.0678137f : 
                0.074649155f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                    -0.0678137f : 
                    0.074649155f) : 
                0.06112594f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_23_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_23_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06770363f : 
                    -0.06766799f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    -0.0060513783f : 
                    0.07399814f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06766799f : 
                0.07399814f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023055807f : 
                    0.023803229f) : 
                0.07399814f) : 
            0.07399814f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06766799f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06766799f : 
                0.030796034f)) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06766799f : 
                0.07399814f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06766799f : 
                    0.07399814f) : 
                0.059703235f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_24_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_24_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06758429f : 
                    -0.06754106f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    -0.0022956855f : 
                    0.07340868f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06754106f : 
                0.07340868f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023244143f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023827886f : 
                    0.07340868f)) : 
            0.07340868f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06754106f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06754106f : 
                0.029763011f)) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06754106f : 
                0.07340868f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06754106f : 
                    0.07340868f) : 
                0.05832142f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_25_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_25_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.067479596f : 
                    -0.06743043f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.0013566568f : 
                    0.0728738f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06743043f : 
                0.0728738f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023357619f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023798436f : 
                    0.0728738f)) : 
            0.0728738f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06743043f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06743043f : 
                0.028799808f)) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06743043f : 
                0.0728738f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06743043f : 
                    0.0728738f) : 
                0.05697535f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_26_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_26_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06738764f : 
                    -0.06733395f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.004875611f : 
                    0.07238752f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06733395f : 
                0.07238752f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.02340572f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023722205f : 
                    0.07238752f)) : 
            0.07238752f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06733395f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06733395f : 
                0.027900342f)) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06733395f : 
                0.07238752f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06733395f : 
                    0.07238752f) : 
                0.055660922f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_27_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_27_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06730678f : 
                    -0.06724978f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.008234058f : 
                    0.07194458f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06724978f : 
                0.07194458f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.02339703f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023605755f : 
                    0.07194458f)) : 
            0.07194458f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
            -0.06724978f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                -0.06724978f : 
                0.027059114f)) : 
         (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06724978f : 
                0.07194458f) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06724978f : 
                    0.07194458f) : 
                0.05437493f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {01000100 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {34, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 0};
  // {11111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 3, 0, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {7, 0, 0, 0};
  // {00000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_28_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_28_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.067235604f : 
                    -0.06717632f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.011408657f : 
                    0.071540445f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06717632f : 
                0.071540445f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023339305f : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.023454942f : 
                    0.071540445f)) : 
            0.071540445f));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06717632f : 
                0.07215025f) : 
            0.071540445f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
            -0.06717632f : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                0.052847713f : 
                0.026271189f)));
    return pred;
  } // constant pool size = 47B, number of visited nodes = 5, static init size = 150B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_29_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_29_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06716394f : 
                    -0.067112185f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.014360575f : 
                    0.07117113f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.067112185f : 
                0.07117113f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023239475f : 
                0.02563445f) : 
            0.07117113f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.067112185f : 
                0.07173161f) : 
            0.07117113f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
            -0.067112185f : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                0.051608745f : 
                0.025532058f)));
    return pred;
  } // constant pool size = 47B, number of visited nodes = 5, static init size = 150B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_30_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_30_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06710137f : 
                    -0.06705617f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.017095422f : 
                    0.07083312f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06705617f : 
                0.07083312f)) : 
         (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023103729f : 
                0.025187219f) : 
            0.07083312f));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06705617f : 
                0.07134891f) : 
            0.07083312f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06707331f : 
                -0.06705617f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                0.05039312f : 
                0.024889087f)));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_31_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_31_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.067046724f : 
                    -0.06700724f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.019604044f : 
                    0.070523344f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06700724f : 
                0.070523344f)) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                0.022941181f : 
                0.070523344f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                0.070523344f : 
                0.02474578f)));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, 3, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06700724f : 
                0.07099855f) : 
            0.070523344f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.067037985f : 
                -0.06700724f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                0.049199995f : 
                0.024279922f)));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_32_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_32_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06699898f : 
                    -0.06696449f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.021881936f : 
                    0.07023908f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06696449f : 
                0.07023908f)) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                0.022755923f : 
                0.07023908f) : 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                0.07023908f : 
                0.02431094f)));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00010001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-120, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06696449f : 
                0.07067735f) : 
            0.07023908f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06700587f : 
                -0.06696449f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                0.048028894f : 
                0.023702046f)));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_33_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_33_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06695727f : 
                    -0.066927135f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.023928812f : 
                    0.0699779f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.066927135f : 
                0.0699779f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.0699779f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.022551572f : 
                0.023883333f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066927135f : 
                0.0703825f) : 
            0.0699779f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06697667f : 
                -0.066927135f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                0.04687962f : 
                0.023153191f)));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_34_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_34_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.066920824f : 
                    -0.06689448f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.02574812f : 
                    0.06973767f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06689448f : 
                0.06973767f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.06973767f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.022331322f : 
                0.023463473f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06689448f : 
                0.07011152f) : 
            0.06973767f) : 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                -0.06695008f : 
                -0.06689448f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                0.045752186f : 
                0.022631248f)));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {10111110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {125, 3, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11111111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 2, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_35_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_35_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06688896f : 
                    -0.06686593f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.027346535f : 
                    0.06951647f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06686593f : 
                0.06951647f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.06951647f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.022098016f : 
                 (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.07041944f : 
                    0.020994855f))));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {11011111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 3, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06686593f : 
                0.069862194f) : 
            0.06951647f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06692589f : 
                    -0.06686593f) : 
                0.04464673f) : 
            0.022134297f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_36_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_36_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06686111f : 
                    -0.06684098f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.02873322f : 
                    0.069312595f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06684098f : 
                0.069312595f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.069312595f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                    0.021854142f : 
                    0.0701478f) : 
                0.020793466f)));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 9, static init size = 270B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
  // {00000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06684098f : 
                0.06963257f) : 
            0.069312595f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06689339f : 
                    -0.06684098f) : 
                0.04356358f) : 
            0.021612791f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_37_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_37_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06683675f : 
                    -0.066819154f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.029919354f : 
                    0.069124505f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.066819154f : 
                0.069124505f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.069124505f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.024408022f : 
                0.020579552f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066819154f : 
                0.06942085f) : 
            0.069124505f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.066864975f : 
                    -0.066819154f) : 
                0.042503048f) : 
            0.021119595f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_38_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_38_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06681546f : 
                    -0.066800065f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.030917494f : 
                    0.06895083f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.066800065f : 
                0.06895083f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.06895083f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023859352f : 
                0.020355541f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066800065f : 
                0.06922548f) : 
            0.06895083f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06684787f : 
                    -0.066800065f) : 
                0.041465588f) : 
            0.020691969f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_39_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_39_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06679684f : 
                    -0.066783376f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.03174104f : 
                    0.06879034f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.066783376f : 
                0.06879034f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.06879034f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.023333246f : 
                0.020126114f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066783376f : 
                0.069045044f) : 
            0.06879034f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06683232f : 
                    -0.066783376f) : 
                0.04045157f) : 
            0.020282807f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_40_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_40_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[1 /* C19 */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    -0.06678055f : 
                    -0.06676877f) : 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                    0.032403897f : 
                    0.068641916f)) : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                -0.06676877f : 
                0.068641916f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
            0.068641916f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                0.022828527f : 
                0.019892592f)));
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06676877f : 
                0.068878256f) : 
            0.068641916f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.066818185f : 
                    -0.06676877f) : 
                0.039461374f) : 
            0.01989088f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_41_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_41_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.066756f : 
                0.06850455f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06676631f : 
                    0.032919995f) : 
                0.06850455f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.06850455f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.022344109f : 
                0.01965611f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066756f : 
                0.06872397f) : 
            0.06850455f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06680532f : 
                    -0.066756f) : 
                0.038495407f) : 
            0.019515093f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_42_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_42_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.066744834f : 
                0.06837733f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06675384f : 
                    0.03330305f) : 
                0.06837733f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.06837733f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.021878928f : 
                0.019417664f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066744834f : 
                0.06858115f) : 
            0.06837733f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.066793606f : 
                    -0.066744834f) : 
                0.037553888f) : 
            0.019154422f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_43_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_43_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06673507f : 
                0.06825944f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06674294f : 
                    0.033566352f) : 
                0.06825944f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.06825944f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.02143202f : 
                0.019178154f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06673507f : 
                0.06844885f) : 
            0.06825944f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06678293f : 
                    -0.06673507f) : 
                0.036637083f) : 
            0.018807907f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_44_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_44_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06672651f : 
                0.068150125f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06673341f : 
                    0.033722546f) : 
                0.068150125f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.068150125f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.021002458f : 
                0.01893832f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06672651f : 
                0.06832623f) : 
            0.068150125f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.0667732f : 
                    -0.06672651f) : 
                0.035745185f) : 
            0.018474665f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_45_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_45_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06671903f : 
                0.068048716f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06672507f : 
                    0.033783577f) : 
                0.068048716f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.068048716f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.020589324f : 
                0.018698843f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06671903f : 
                0.06821251f) : 
            0.068048716f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.066764325f : 
                    -0.06671903f) : 
                0.03487826f) : 
             (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.016468683f : 
                0.02052857f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_46_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_46_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06671249f : 
                0.06795458f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.066717766f : 
                    0.033760544f) : 
                0.06795458f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.06795458f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.020353016f : 
                0.018350326f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06671249f : 
                0.06810697f) : 
            0.06795458f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06675622f : 
                    -0.06671249f) : 
                0.034036275f) : 
            0.017848331f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_47_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_47_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.06670677f : 
                0.067867145f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06671138f : 
                    0.03366375f) : 
                0.067867145f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.067867145f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.019957833f : 
                0.018121667f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.06670677f : 
                0.068009004f) : 
            0.067867145f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.066748805f : 
                    -0.06670677f) : 
                0.03321925f) : 
            0.017549885f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_48_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_48_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.066701755f : 
                0.06778592f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.06670579f : 
                    0.033502672f) : 
                0.06778592f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.06778592f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.019577775f : 
                0.01789412f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066701755f : 
                0.067917995f) : 
            0.06778592f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06674204f : 
                    -0.066701755f) : 
                0.032426957f) : 
            0.017261924f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[2] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_49_class_1.score0(fdata);
    preds[3] += gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_49_class_2.score0(fdata);
  }
}
class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                -0.066697374f : 
                0.067710415f) : 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* C9 */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                    -0.066700906f : 
                    0.033285893f) : 
                0.067710415f)) : 
         (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
            0.067710415f : 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                0.019212032f : 
                0.017668137f)));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 7, static init size = 210B
  // {10111011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 2, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}

class gbm_5ad6876d_c43d_4b93_b404_2908a71fe19f_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* C9 */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (data[0] >= 3) || (GenModel.bitSetIsInRange(32, 0, data[0]) && (data[0] < 3) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[2])) ? 
             (Double.isNaN(data[1 /* C19 */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (data[1] >= 4) || (GenModel.bitSetIsInRange(32, 0, data[1]) && (data[1] < 4) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                -0.066697374f : 
                0.06783343f) : 
            0.067710415f) : 
         (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[2])) ? 
             (!Double.isNaN(data[2 /* C21 */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[2])) ? 
                 (Double.isNaN(data[2 /* C21 */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (data[2] >= 10) || (GenModel.bitSetIsInRange(32, 0, data[2]) && (data[2] < 10) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
                    -0.06673585f : 
                    -0.066697374f) : 
                0.031659175f) : 
            0.016983878f));
    return pred;
  } // constant pool size = 56B, number of visited nodes = 6, static init size = 180B
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 0, 0, 0};
  // {01000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {12, 0, 0, 0};
  // {00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
}


